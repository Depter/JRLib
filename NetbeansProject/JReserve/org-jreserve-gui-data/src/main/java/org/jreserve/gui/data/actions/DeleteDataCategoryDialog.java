/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.data.actions;

import java.awt.Dialog;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.SwingWorker;
import org.jreserve.gui.data.api.DataCategory;
import org.jreserve.gui.data.api.DataItem;
import org.jreserve.gui.data.api.DataSource;
import org.jreserve.gui.misc.utils.notifications.BubbleUtil;
import org.jreserve.gui.misc.utils.notifications.DialogUtil;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 */
@Messages({
    "LBL.DeleteDataCategoryDialog.Title=Delete Data Items",
    "# {0} - path",
    "MSG.DeleteDataCategoryDialog.Delete.Error=Unable to delete: {0}"
})
class DeleteDataCategoryDialog extends javax.swing.JPanel {

    static void showDialog(List<DataItem> items) {
        DeleteDataCategoryDialog content = new DeleteDataCategoryDialog(items);
        Dialog dialog = DialogUtil.createDialog(content);
        content.setDialog(dialog);
        dialog.setVisible(true);
    }
    
    private Dialog dialog;
    private List<DataItem> items;
    private Set<String> entries;
    private DeleteWorker worker;
    
    private DeleteDataCategoryDialog(List<DataItem> items) {
        initComponents();
        setName(Bundle.LBL_DeleteDataCategoryDialog_Title());
        
        this.items = items;
        initItemsList();
        filterRoots();
        pBar.setVisible(false);
    }
    
    private void initItemsList() {
        getEntryNames();
        itemsText.setRows(entries.size());
        itemsText.setText(toString(entries));
    }
    
    private void getEntryNames() {
        entries = new TreeSet<String>();
        for(DataItem item : items)
            appendItem(entries, item);
    }
    
    private void appendItem(Set<String> entries, DataItem item) {
        entries.add(item.getPath());
        if(item instanceof DataCategory) {
            DataCategory category = (DataCategory) item;
            for(DataCategory child : category.getChildCategories())
                appendItem(entries, child);
            for(DataSource child : category.getDataSources())
                entries.add(child.getPath());
        }
    }

    private String toString(Set<String> entries) {
        StringBuilder sb = new StringBuilder();
        for(String entry : entries) {
            if(sb.length() > 0)
                sb.append('\n');
            sb.append(" - ").append(entry);
        }
        return sb.toString();
    }
    
    private void filterRoots() {
        Iterator<DataItem> it = items.iterator();
        while(it.hasNext()) {
            DataItem item = it.next();
            if(entries.contains(item.getParent().getPath()))
                it.remove();
        }
    }
    
    private void setDialog(Dialog dialog) {
        this.dialog = dialog;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        questionLabel = new javax.swing.JLabel();
        itemsScroll = new javax.swing.JScrollPane();
        itemsText = new javax.swing.JTextArea();
        bottomPanel = new javax.swing.JPanel();
        pbarPanel = new javax.swing.JPanel();
        pBar = new javax.swing.JProgressBar();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(questionLabel, org.openide.util.NbBundle.getMessage(DeleteDataCategoryDialog.class, "DeleteDataCategoryDialog.questionLabel.text")); // NOI18N
        add(questionLabel, java.awt.BorderLayout.PAGE_START);

        itemsText.setEditable(false);
        itemsText.setColumns(20);
        itemsText.setRows(5);
        itemsText.setFocusable(false);
        itemsScroll.setViewportView(itemsText);

        add(itemsScroll, java.awt.BorderLayout.CENTER);

        bottomPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 0, 0, 0));
        bottomPanel.setLayout(new java.awt.BorderLayout(20, 0));

        pbarPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        pbarPanel.add(pBar, gridBagConstraints);

        bottomPanel.add(pbarPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(DeleteDataCategoryDialog.class, "DeleteDataCategoryDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(DeleteDataCategoryDialog.class, "DeleteDataCategoryDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        bottomPanel.add(buttonPanel, java.awt.BorderLayout.EAST);

        add(bottomPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dialog.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        okButton.setEnabled(false);
        pBar.setMaximum(items.size());
        pBar.setVisible(true);
        worker = new DeleteWorker(items);
        worker.execute();
    }//GEN-LAST:event_okButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane itemsScroll;
    private javax.swing.JTextArea itemsText;
    private javax.swing.JButton okButton;
    private javax.swing.JProgressBar pBar;
    private javax.swing.JPanel pbarPanel;
    private javax.swing.JLabel questionLabel;
    // End of variables declaration//GEN-END:variables

    private class DeleteWorker extends SwingWorker<Void, Integer> {
        
        private final DataItem[] items;
        private int step = 0;
        
        private DeleteWorker(List<DataItem> items) {
            this.items = items.toArray(new DataItem[items.size()]);
        }
        
        @Override
        protected Void doInBackground() throws Exception {
            for(DataItem item : this.items)
                deleteItem(item);
            return null;
        }
        
        private void deleteItem(DataItem item) throws Exception {
            try {
                item.getDataManager().deleteDataItem(item);
                publish(step++);
            } catch (Exception ex) {
                String msg = Bundle.MSG_DeleteDataCategoryDialog_Delete_Error(item.getPath());
                throw new Exception(msg, ex);
            }
        }

        @Override
        protected void process(List<Integer> chunks) {
            int size = chunks.size();
            if(size > 0)
                pBar.setValue(chunks.get(size-1));
        }
        
        @Override
        protected void done() {
            try {
                get();
                dialog.setVisible(false);
            } catch (Exception ex) {
                BubbleUtil.showException(ex);
            } finally {
                okButton.setEnabled(true);
                pBar.setValue(0);
                pBar.setVisible(false);
            }
        }
    }
}
