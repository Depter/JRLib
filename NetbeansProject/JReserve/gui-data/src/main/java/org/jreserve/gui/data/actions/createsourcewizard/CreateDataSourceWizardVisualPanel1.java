/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.data.actions.createsourcewizard;

import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.gui.data.api.DataCategory;
import org.jreserve.gui.data.api.util.DataItemChooser;
import org.jreserve.gui.data.api.DataManager;
import org.jreserve.gui.misc.utils.widgets.TextPrompt;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.openide.util.NbBundle.Messages;

@Messages({
    "LBL.CreateDataSourceWizardVisualPanel1.Name=Name & Category",
    "LBL.CreateDataSourceWizardVisualPanel1.Name.Prompt=Name of the source...",
    "MSG.CreateDataSourceWizardVisualPanel1.Parent.Empty=Parent category not selected!",
    "MSG.CreateDataSourceWizardVisualPanel1.Name.Empty=Name is not set!",
    "# {0} - name",
    "MSG.CreateDataSourceWizardVisualPanel1.Name.Exists=Name \"{0}\" already exists!",
    "# {0} - name",
    "MSG.CreateDataSourceWizardVisualPanel1.Name.Invalid=Name \"{0}\" is invalid!"
})
class CreateDataSourceWizardVisualPanel1 extends JPanel {
    final static String PROP_NAME = "source.Name";
    final static String PROP_PARENT = "source.Parent";
    
    private DataManager dm;
    private NameListener textListener = new NameListener();
    
    private DataCategory parent;
    private String name;
    
    public CreateDataSourceWizardVisualPanel1() {
        initComponents();
        TextPrompt.createStandard(Bundle.LBL_CreateDataSourceWizardVisualPanel1_Name_Prompt(), nameText);
    }
    
    void setDataCategory(DataCategory category) {
        this.dm = category.getDataManager();
        setProjectName();
        selectCategory(category);
    }
    
    private void setProjectName() {
        Project project = dm.getProject();
        String projectName = ProjectUtils.getInformation(project).getDisplayName();
        projectText.setText(projectName);
    }
    
    private void selectCategory(DataCategory category) {
        String path = category==null? null : category.getPath();
        parentText.setText(path);
    }

    @Override
    public String getName() {
        return Bundle.LBL_CreateDataSourceWizardVisualPanel1_Name();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        projectLabel = new javax.swing.JLabel();
        projectText = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        locationLabel = new javax.swing.JLabel();
        parentText = new javax.swing.JTextField();
        browseParentButton = new javax.swing.JButton();
        pathLabel = new javax.swing.JLabel();
        pathText = new javax.swing.JTextField();
        filler = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(projectLabel, org.openide.util.NbBundle.getMessage(CreateDataSourceWizardVisualPanel1.class, "CreateDataSourceWizardVisualPanel1.projectLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(projectLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(projectText, org.openide.util.NbBundle.getMessage(CreateDataSourceWizardVisualPanel1.class, "CreateDataSourceWizardVisualPanel1.projectText.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        add(projectText, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(CreateDataSourceWizardVisualPanel1.class, "CreateDataSourceWizardVisualPanel1.nameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 5);
        add(nameLabel, gridBagConstraints);

        nameText.setText(null);
        nameText.getDocument().addDocumentListener(textListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(nameText, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(locationLabel, org.openide.util.NbBundle.getMessage(CreateDataSourceWizardVisualPanel1.class, "CreateDataSourceWizardVisualPanel1.locationLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 5);
        add(locationLabel, gridBagConstraints);

        parentText.setText(null);
        parentText.getDocument().addDocumentListener(textListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(parentText, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(browseParentButton, org.openide.util.NbBundle.getMessage(CreateDataSourceWizardVisualPanel1.class, "CreateDataSourceWizardVisualPanel1.browseParentButton.text")); // NOI18N
        browseParentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseParentButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(browseParentButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(CreateDataSourceWizardVisualPanel1.class, "CreateDataSourceWizardVisualPanel1.pathLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 5);
        add(pathLabel, gridBagConstraints);

        pathText.setEditable(false);
        pathText.setText(null);
        pathText.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(pathText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void browseParentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseParentButtonActionPerformed
        DataCategory category = DataItemChooser.chooseCategory(dm);
        if(category != null)
            parentText.setText(category.getPath());
    }//GEN-LAST:event_browseParentButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseParentButton;
    private javax.swing.Box.Filler filler;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JTextField parentText;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathText;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JLabel projectText;
    // End of variables declaration//GEN-END:variables

    
    private void updatePath() {
        if(parent == null || name == null || name.trim().length()==0)
            pathText.setText("");
        else
          pathText.setText(parent.getPath()+"/"+name);
    }
    
    private class NameListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            setNameProperty(e);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            setNameProperty(e);
        }
        
        private void setNameProperty(DocumentEvent e) {
            updateState(e);
            updatePath();
        }
        
        private void updateState(DocumentEvent e) {
            if(nameText.getDocument() == e.getDocument()) {
                name = nameText.getText();
                putClientProperty(PROP_NAME, name);
            } else {
                parent = getParent();
                putClientProperty(PROP_PARENT, parent);
            }
        }
        
        private DataCategory getParent() {
            String path = parentText.getText();
            if(path == null || path.length() == 0)
                return null;
            return dm.getCategory(path);
        }
        
        @Override
        public void changedUpdate(DocumentEvent e) {
        }
    } 
}
