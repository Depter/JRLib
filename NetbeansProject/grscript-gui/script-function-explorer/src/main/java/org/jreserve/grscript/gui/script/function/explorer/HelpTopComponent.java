/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.grscript.gui.script.function.explorer;

import java.util.ArrayList;
import java.util.List;
import javax.help.HelpSet;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.jreserve.grscript.gui.script.function.explorer//Help//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "HelpTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "org.jreserve.grscript.gui.script.function.explorer.HelpTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_HelpAction",
        preferredID = "HelpTopComponent")
@Messages({
    "CTL_HelpAction=Information window",
    "CTL_HelpTopComponent=Information",
    "HINT_HelpTopComponent=Information about selected functions"
})
public final class HelpTopComponent extends TopComponent {
    
    private Result<FunctionItem> result;
    private FunctionListener listener;

    public HelpTopComponent() {
        initComponents();
        setName(Bundle.CTL_HelpTopComponent());
        setToolTipText(Bundle.HINT_HelpTopComponent());
        initLookupResult();
    }

    private void initLookupResult() {
        result = Utilities.actionsGlobalContext().lookupResult(FunctionItem.class);
        listener = new FunctionListener();
        result.addLookupListener(listener);
    }
    
    private HelpSet createMasterHelpSet() {
        HelpSet master = new HelpSet();
        for(HelpSet set : Lookup.getDefault().lookupAll(HelpSet.class))
            master.add(set);
        return master;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        helpViewer = new javax.help.JHelp(createMasterHelpSet());

        setLayout(new java.awt.BorderLayout());

        helpViewer.setNavigatorDisplayed(false);
        add(helpViewer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.help.JHelp helpViewer;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }
    
    private class FunctionListener implements LookupListener {

        @Override
        public void resultChanged(LookupEvent le) {
            List<FunctionItem> items = new ArrayList<FunctionItem>(result.allInstances());
            if(!items.isEmpty()) {
                FunctionItem item = items.get(items.size()-1);
                HelpCtx ctx = item.getHelpCtx();
                helpViewer.setCurrentID(ctx.getHelpID());
            }
        }    
    }
}
