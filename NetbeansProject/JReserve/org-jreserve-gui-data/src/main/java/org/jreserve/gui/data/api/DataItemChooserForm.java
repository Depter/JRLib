/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.data.api;

import java.util.Collections;
import java.util.List;
import javax.swing.JButton;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.jreserve.gui.data.actions.DataCategoryTreeModel;
import org.jreserve.gui.data.actions.DataCategoryTreeRenderer;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "LBL.DataItemChooserForm.Cancel=Cancel",
    "LBL.DataItemChooserForm.Ok=Select"
})
class DataItemChooserForm<T> extends javax.swing.JPanel {
    
    private final static int OPTION_ALIGN = DialogDescriptor.DEFAULT_ALIGN;
    private final static boolean MODAL = true;
    
    static interface Controller<T> {
        String getTitle();
        boolean multipleSelection();
        boolean showSources();
        List<T> getResults(TreePath[] pathes);
    }
    
    static <T> List<T> selectItems(DataManager dm, Controller<T> controller) {
        DataItemChooserForm<T> form = new DataItemChooserForm(dm, controller);
        Object[] options = new Object[]{form.okButton, form.cancelButton};
        DialogDescriptor dd = new DialogDescriptor(form, controller.getTitle(), MODAL, options, options[0], OPTION_ALIGN, HelpCtx.DEFAULT_HELP, null);
        dd.setClosingOptions(options);
        
        if(DialogDisplayer.getDefault().notify(dd) == options[0]) {
            return form.getSelections();
        } else {
            return null;
        }
    }
    
    private JButton okButton = new JButton(Bundle.LBL_DataItemChooserForm_Ok());
    private JButton cancelButton = new JButton(Bundle.LBL_DataItemChooserForm_Cancel());
    
    private DataCategoryTreeModel treeModel;
    private Controller<T> controller;
    
    DataItemChooserForm(DataManager dm, Controller<T> controller) {
        this.controller = controller;
        treeModel = new DataCategoryTreeModel(dm, controller.showSources());
        initComponents();
        okButton.setEnabled(false);
    }
    
    private List<T> getSelections() {
        TreePath[] pathes = tree.getSelectionPaths();
        if(pathes == null)
            return Collections.EMPTY_LIST;
        return controller.getResults(pathes);
    }
    
    private void validateSelection() {
        if(getSelections().isEmpty())
            okButton.setEnabled(false);
        else
            okButton.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treeScroll = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.BorderLayout());

        treeScroll.setPreferredSize(new java.awt.Dimension(250, 300));

        tree.setModel(treeModel);
        tree.setCellRenderer(new DataCategoryTreeRenderer());
        tree.getSelectionModel().setSelectionMode(controller.multipleSelection()? TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION : TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.getSelectionModel().addTreeSelectionListener(new TreeListeenr());
        treeScroll.setViewportView(tree);

        add(treeScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree tree;
    private javax.swing.JScrollPane treeScroll;
    // End of variables declaration//GEN-END:variables

    private class TreeListeenr implements TreeSelectionListener {
        @Override
        public void valueChanged(TreeSelectionEvent e) {
            validateSelection();
        }
    }
}
