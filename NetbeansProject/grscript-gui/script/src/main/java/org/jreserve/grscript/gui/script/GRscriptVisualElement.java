package org.jreserve.grscript.gui.script;

import groovy.ui.ConsoleTextEditor;
import java.awt.BorderLayout;
import java.util.concurrent.ExecutionException;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.SwingWorker;
import org.jreserve.grscript.gui.notificationutil.BubbleUtil;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_GRscript_VISUAL",
        iconBase = "org/jreserve/grscript/gui/script/triangle.png",
        mimeType = "text/x-grscript",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "GRscriptVisual",
        position = 2000)
@Messages({
    "LBL_GRscript_VISUAL=Visual",
    "MSG.GRscriptVisualElement.LoadError=Unable to load script..."
})
public final class GRscriptVisualElement extends JPanel implements MultiViewElement {

    private final GRscriptDataObject obj;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private ConsoleTextEditor editor;
    private Loader loader;
    
    public GRscriptVisualElement(Lookup lkp) {
        obj = lkp.lookup(GRscriptDataObject.class);
        assert obj != null;
        initComponents();
        
        editor = new ConsoleTextEditor();
        add(editor, BorderLayout.CENTER);
        loader = new Loader();
        loader.execute();
    }

    @Override
    public String getName() {
        return "GRscriptVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
        if(loader != null)
            loader.cancel(true);
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }
    
    private class Loader extends SwingWorker<String, String> {

        @Override
        protected String doInBackground() throws Exception {
            synchronized(obj) {
                return obj.getPrimaryFile().asText();
            }
        }

        @Override
        protected void done() {
            try {
                String str = get();
                editor.getTextEditor().setText(str);
            } catch (InterruptedException ex) {
            } catch (ExecutionException ex) {
                BubbleUtil.showException(Bundle.MSG_GRscriptVisualElement_LoadError(), ex);
            } finally {
                loader = null;
            }
        }
    }
}