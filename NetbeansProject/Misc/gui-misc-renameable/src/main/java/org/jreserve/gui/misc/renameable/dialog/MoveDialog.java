/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.misc.renameable.dialog;

import java.awt.Component;
import java.awt.Dialog;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;
import org.jreserve.gui.misc.utils.widgets.CommonIcons;
import org.jreserve.gui.misc.utils.widgets.Displayable;
import org.jreserve.gui.misc.utils.widgets.EmptyIcon;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.loaders.DataFolder;
import org.openide.loaders.DataObject;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "LBL.MoveDialog.Title=Move Objects"
})
public class MoveDialog extends javax.swing.JPanel {
    private final static boolean MODAL = true;
    
    public static void move(DataFolder folder, List<DataObject> sources) {
        MoveDialog content = new MoveDialog(folder, sources);
        DialogDescriptor dd = new DialogDescriptor(
            content, Bundle.LBL_MoveDialog_Title(), MODAL,
            new Object[0], null, DialogDescriptor.DEFAULT_ALIGN,
            HelpCtx.DEFAULT_HELP, null);
        
        Dialog dialog = DialogDisplayer.getDefault().createDialog(dd);
        content.showDialog(dialog);
    }
    
    private Dialog dialog;
    private DataFolder folder;
    private List<DataObject> sources;
    
    private MoveDialog(DataFolder folder, List<DataObject> sources) {
        initComponents();
        this.folder = folder;
        this.sources = sources;
        initFolder();
        sourcesList.setModel(createListModel());
    }
    
    private void initFolder() {
        Displayable d = folder.getLookup().lookup(Displayable.class);
        if(d != null) {
            targetText.setIcon(d.getIcon());
            targetText.setText(d.getDisplayName());
        } else {
            String path = Displayable.Utils.displayProjectPath(folder.getPrimaryFile());
            targetText.setText(path);
        }
    }
    

    private ListModel createListModel() {
        DefaultListModel model = new DefaultListModel();
        for(DataObject source : sources)
            model.addElement(source);
        return model;
    }
    
    private void showDialog(Dialog dialog) {
        this.dialog = dialog;
        this.dialog.setVisible(true);
    }
    
    private void closeDialog() {
        dialog.setVisible(false);
        dialog.dispose();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        targetLabel = new javax.swing.JLabel();
        targetText = new javax.swing.JLabel();
        sourcesLabel = new javax.swing.JLabel();
        sourcesScroll = new javax.swing.JScrollPane();
        sourcesList = new javax.swing.JList();
        buttonPanel = new javax.swing.JPanel();
        pBarPanel = new javax.swing.JPanel();
        pBar = new javax.swing.JProgressBar();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(targetLabel, org.openide.util.NbBundle.getMessage(MoveDialog.class, "MoveDialog.targetLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 5);
        add(targetLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(targetText, null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(targetText, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(sourcesLabel, org.openide.util.NbBundle.getMessage(MoveDialog.class, "MoveDialog.sourcesLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        add(sourcesLabel, gridBagConstraints);

        sourcesScroll.setPreferredSize(new java.awt.Dimension(300, 200));

        sourcesList.setModel(new DefaultListModel());
        sourcesList.setCellRenderer(new Renderer());
        sourcesScroll.setViewportView(sourcesList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        add(sourcesScroll, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        pBarPanel.setLayout(new java.awt.GridBagLayout());

        pBar.setVisible(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pBarPanel.add(pBar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        buttonPanel.add(pBarPanel, gridBagConstraints);

        okButton.setIcon(CommonIcons.ok());
        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(MoveDialog.class, "MoveDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        buttonPanel.add(okButton, gridBagConstraints);

        cancelButton.setIcon(CommonIcons.cancel());
        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(MoveDialog.class, "MoveDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        buttonPanel.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(buttonPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        closeDialog();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        okButton.setEnabled(false);
        cancelButton.setEnabled(false);
        pBar.setVisible(true);
        new Worker().execute();
    }//GEN-LAST:event_okButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JProgressBar pBar;
    private javax.swing.JPanel pBarPanel;
    private javax.swing.JLabel sourcesLabel;
    private javax.swing.JList sourcesList;
    private javax.swing.JScrollPane sourcesScroll;
    private javax.swing.JLabel targetLabel;
    private javax.swing.JLabel targetText;
    // End of variables declaration//GEN-END:variables

    private class Renderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, false, false);
            
            DataObject obj = (DataObject) value;
            Displayable d = obj.getLookup().lookup(Displayable.class);
            if(d != null) {
                setText(d.getDisplayName());
                setIcon(d.getIcon());
            } else {
                String path = Displayable.Utils.displayProjectPath(obj.getPrimaryFile());
                setText(path);
                setIcon(EmptyIcon.EMPTY_16);
            }
            
            return this;
        }
    }
    
    private class Worker extends MoveWorker {
        
        private Worker() {
            super(folder, sources, pBar);
        }

        @Override
        protected void done() {
            pBar.setVisible(false);
            closeDialog();
        }
        
        
    }
}
