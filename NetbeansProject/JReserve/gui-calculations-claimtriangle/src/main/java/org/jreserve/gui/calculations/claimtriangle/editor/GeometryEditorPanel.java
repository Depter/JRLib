/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.calculations.claimtriangle.editor;

import javax.swing.Icon;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jreserve.gui.calculations.claimtriangle.impl.ClaimTriangleCalculationImpl;
import org.jreserve.jrlib.gui.data.TriangleGeometry;
import org.openide.util.ImageUtilities;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
public class GeometryEditorPanel extends javax.swing.JPanel {
    
    private final static Icon LINK_IMG = ImageUtilities.loadImageIcon("org/jreserve/gui/calculations/claimtriangle/chain.png", false);   //NOI18
    
    private InputListener inputListener = new InputListener();
    private ClaimTriangleCalculationImpl calculation;
    private boolean myChange = false;
    
    public GeometryEditorPanel() {
        initComponents();
    }

    void setCalculation(ClaimTriangleCalculationImpl calculation) {
        if(calculation != null) {
            this.calculation = calculation;
            TriangleGeometry geometry = calculation.getGeometry();
            myChange = true;
            updateFromGeometry(geometry);
            myChange = false;
            enableControls();
        }
    }
    
    private void updateFromGeometry(final TriangleGeometry geometry) {
        synchronized(geometry) {
            startDateSpinner.setMonthDate(geometry.getStartDate());
            endDateSpinner.setMonthDate(geometry.getEndDate());
            accidentLengthSpinner.setValue(geometry.getAccidentLength());
            symmetricButton.setSelected(geometry.getAccidentLength() == geometry.getDevelopmentLength());
            developmentLengthSpinner.setValue(geometry.getDevelopmentLength());
        }
    }
    
    private void enableControls() {
        startDateSpinner.setEnabled(true);
        endDateSpinner.setEnabled(true);
        accidentLengthSpinner.setEnabled(true);
        symmetricButton.setEnabled(true);
        if(!symmetricButton.isSelected())
            developmentLengthSpinner.setEnabled(true);
    }
    
    void componentClosed() {
        this.calculation = null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        geometryLabel = new javax.swing.JLabel();
        intervalLabel = new javax.swing.JLabel();
        intervalSeparatorLabel = new javax.swing.JLabel();
        startDateSpinner = new org.jreserve.gui.trianglewidget.geometry.MonthDateSpinner();
        endDateSpinner = new org.jreserve.gui.trianglewidget.geometry.MonthDateSpinner();
        startLabel = new javax.swing.JLabel();
        endLabel = new javax.swing.JLabel();
        accidentLabel = new javax.swing.JLabel();
        developmentLabel = new javax.swing.JLabel();
        lengthLabel = new javax.swing.JLabel();
        accidentLengthSpinner = new javax.swing.JSpinner();
        symmetricButton = new javax.swing.JToggleButton();
        developmentLengthSpinner = new javax.swing.JSpinner();
        msgLabel = new org.jreserve.gui.misc.utils.widgets.MsgLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(geometryLabel, org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.geometryLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(geometryLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(intervalLabel, org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.intervalLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 5);
        add(intervalLabel, gridBagConstraints);

        intervalSeparatorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(intervalSeparatorLabel, org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.intervalSeparatorLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(intervalSeparatorLabel, gridBagConstraints);

        startDateSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.startDateSpinner.toolTipText")); // NOI18N
        startDateSpinner.setEnabled(false);
        startDateSpinner.addChangeListener(inputListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(startDateSpinner, gridBagConstraints);

        endDateSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.endDateSpinner.toolTipText")); // NOI18N
        endDateSpinner.setEnabled(false);
        endDateSpinner.addChangeListener(inputListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(endDateSpinner, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(startLabel, org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.startLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(startLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(endLabel, org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.endLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(endLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(accidentLabel, org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.accidentLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(accidentLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(developmentLabel, org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.developmentLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(developmentLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lengthLabel, org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.lengthLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 20, 5);
        add(lengthLabel, gridBagConstraints);

        accidentLengthSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(12), Integer.valueOf(1), null, Integer.valueOf(1)));
        accidentLengthSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.accidentLengthSpinner.toolTipText")); // NOI18N
        accidentLengthSpinner.setEnabled(false);
        accidentLengthSpinner.addChangeListener(inputListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 5);
        add(accidentLengthSpinner, gridBagConstraints);

        symmetricButton.setIcon(LINK_IMG);
        symmetricButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(symmetricButton, null);
        symmetricButton.setToolTipText(org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.symmetricButton.toolTipText")); // NOI18N
        symmetricButton.setEnabled(false);
        symmetricButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                symmetricButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 5);
        add(symmetricButton, gridBagConstraints);

        developmentLengthSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(12), Integer.valueOf(1), null, Integer.valueOf(1)));
        developmentLengthSpinner.setToolTipText(org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.developmentLengthSpinner.toolTipText")); // NOI18N
        developmentLengthSpinner.setEnabled(false);
        developmentLengthSpinner.addChangeListener(inputListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 5);
        add(developmentLengthSpinner, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(msgLabel, org.openide.util.NbBundle.getMessage(GeometryEditorPanel.class, "GeometryEditorPanel.msgLabel.text")); // NOI18N
        msgLabel.clearMessage();
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(msgLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void symmetricButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_symmetricButtonActionPerformed
        if(symmetricButton.isSelected()) {
            developmentLengthSpinner.setValue(accidentLengthSpinner.getValue());
            developmentLengthSpinner.setEnabled(false);
        } else {
            developmentLengthSpinner.setEnabled(true);
        }
    }//GEN-LAST:event_symmetricButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accidentLabel;
    private javax.swing.JSpinner accidentLengthSpinner;
    private javax.swing.JLabel developmentLabel;
    private javax.swing.JSpinner developmentLengthSpinner;
    private org.jreserve.gui.trianglewidget.geometry.MonthDateSpinner endDateSpinner;
    private javax.swing.JLabel endLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel geometryLabel;
    private javax.swing.JLabel intervalLabel;
    private javax.swing.JLabel intervalSeparatorLabel;
    private javax.swing.JLabel lengthLabel;
    private org.jreserve.gui.misc.utils.widgets.MsgLabel msgLabel;
    private org.jreserve.gui.trianglewidget.geometry.MonthDateSpinner startDateSpinner;
    private javax.swing.JLabel startLabel;
    private javax.swing.JToggleButton symmetricButton;
    // End of variables declaration//GEN-END:variables

    private class InputListener implements ChangeListener {

        @Override
        public void stateChanged(ChangeEvent e) {
        }
    }
}
