/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.data.clipboard;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "LBL.ImportClipboardTriangleVisualPanel.Name=Paste Triangle",
    "CTL.ImportClipboardTriangleVisualPanel.Paste=Paste"
})
class ImportClipboardTriangleVisualPanel extends javax.swing.JPanel {

    private final ImportClipboardTriangleWizardPanel controller;
    
    ImportClipboardTriangleVisualPanel(ImportClipboardTriangleWizardPanel controller) {
        this.controller = controller;
        initComponents();
    }
    
    @Override
    public String getName() {
        return Bundle.LBL_ClipboardTriangleImportDataProvider_Name();
    }
    
    String[][] getValues() {
        return ((ClipboardTable) table).getValues();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableTitleLabel = new javax.swing.JLabel();
        tableScroll = new javax.swing.JScrollPane();
        table = new ClipboardTable();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(tableTitleLabel, org.openide.util.NbBundle.getMessage(ImportClipboardTriangleVisualPanel.class, "ImportClipboardTriangleVisualPanel.tableTitleLabel.text")); // NOI18N
        add(tableTitleLabel, java.awt.BorderLayout.PAGE_START);

        tableScroll.setPreferredSize(new java.awt.Dimension(400, 250));

        table.getModel().addTableModelListener(new TableListener());
        table.setDefaultRenderer(String.class, new Renderer());
        tableScroll.setViewportView(table);

        add(tableScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable table;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JLabel tableTitleLabel;
    // End of variables declaration//GEN-END:variables

    private class TableListener implements TableModelListener {
        @Override
        public void tableChanged(TableModelEvent e) {
            controller.changed();
        }
    }
    
    private class Renderer extends DefaultTableCellRenderer {
        
        private Renderer() {
            setHorizontalAlignment(SwingConstants.RIGHT);
        }
        
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if((value instanceof String) && controller.canParse((String)value)) {
                setForeground(Color.BLACK);
            } else {
                setForeground(Color.RED);
            }
            return this;
        }
    }
}
