/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.misc.utils.actions.deletable;

import java.awt.Component;
import java.awt.Dialog;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;
import org.jreserve.gui.misc.utils.widgets.CommonIcons;
import org.jreserve.gui.misc.utils.widgets.Displayable;
import org.jreserve.gui.misc.utils.widgets.WidgetUtils;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "LBL.DeleteDialog.Title=Delete"
})
class DeleteDialog extends javax.swing.JPanel {
    
    private final static boolean MODAL = true;
    
    static void delete(List<Deletable> deletables) {
        DeleteDialog panel = new DeleteDialog(deletables);
        DialogDescriptor dd = new DialogDescriptor(
                panel, Bundle.LBL_DeleteDialog_Title(), MODAL, 
                new Object[0], null, DialogDescriptor.DEFAULT_ALIGN, 
                HelpCtx.DEFAULT_HELP, null);
        
        Dialog dialog = DialogDisplayer.getDefault().createDialog(dd);
        panel.showDialog(dialog);
    }
    
    private List<Deletable> deletables;
    private Dialog dialog;
    
    private DeleteDialog(List<Deletable> deletable) {
        this.deletables = deletable;
        initComponents();
    }
    
    private ListModel createListModel() {
        DefaultListModel model = new DefaultListModel();
        for(Deletable deletable : deletables)
            model.addElement(deletable);
        return model;
    }
    
    private void showDialog(Dialog dialog) {
        this.dialog = dialog;
        this.dialog.setVisible(true);
    }
    
    private void closeDialog() {
        dialog.setVisible(false);
        dialog.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        questionLabel = new javax.swing.JLabel();
        listScroll = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        buttonPanel = new javax.swing.JPanel();
        pBarPanel = new javax.swing.JPanel();
        pBar = new javax.swing.JProgressBar();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.BorderLayout(15, 15));

        org.openide.awt.Mnemonics.setLocalizedText(questionLabel, org.openide.util.NbBundle.getMessage(DeleteDialog.class, "DeleteDialog.questionLabel.text")); // NOI18N
        add(questionLabel, java.awt.BorderLayout.NORTH);

        listScroll.setPreferredSize(new java.awt.Dimension(350, 150));

        list.setModel(createListModel());
        list.setCellRenderer(new DeletableRenderer());
        listScroll.setViewportView(list);

        add(listScroll, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        pBarPanel.setLayout(new java.awt.GridBagLayout());

        pBar.setVisible(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pBarPanel.add(pBar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        buttonPanel.add(pBarPanel, gridBagConstraints);

        okButton.setIcon(CommonIcons.ok());
        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(DeleteDialog.class, "DeleteDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        buttonPanel.add(okButton, gridBagConstraints);

        cancelButton.setIcon(CommonIcons.cancel());
        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(DeleteDialog.class, "DeleteDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        buttonPanel.add(cancelButton, gridBagConstraints);

        add(buttonPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        closeDialog();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        okButton.setEnabled(false);
        cancelButton.setEnabled(false);
        pBar.setVisible(true);
        pBar.setIndeterminate(true);
        new Worker().execute();
    }//GEN-LAST:event_okButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList list;
    private javax.swing.JScrollPane listScroll;
    private javax.swing.JButton okButton;
    private javax.swing.JProgressBar pBar;
    private javax.swing.JPanel pBarPanel;
    private javax.swing.JLabel questionLabel;
    // End of variables declaration//GEN-END:variables

    private class DeletableRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, false, false);
            
            if(value instanceof Displayable) {
                Displayable d = (Displayable) value;
                setText(d.getDisplayName());
                setIcon(d.getIcon());
            }
            
            return this;
        }
        
    }
    
    private class Worker extends DeleteWorker {

        public Worker() {
            super(deletables);
        }

        @Override
        protected void process(List<WorkerChunk> chunks) {
            for(WorkerChunk chunk : chunks)
                chunk.setProgress(pBar);
        }

        @Override
        protected void done() {
            pBar.setVisible(false);
            closeDialog();
        }
    }
}
