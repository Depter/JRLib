/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.calculations.vector.wizard;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.gui.calculations.api.NamedCalculationProvider;
import org.jreserve.gui.misc.namedcontent.NamedContentUtil;
import org.jreserve.gui.misc.utils.widgets.CommonIcons;
import org.jreserve.gui.misc.utils.widgets.TextPrompt;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataFolder;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "LBL.CreateVectorVisualPanel1.Name=Name & Location",
    "PROMPT.CreateVectorVisualPanel1.Name=Select name",
    "PROMPT.CreateVectorVisualPanel1.Folder=Select location"
})
class CreateVectorVisualPanel1 extends javax.swing.JPanel {

    private final CreateVectorWizardPanel1 controller;
    private NamedCalculationProvider cop;
    private TextListener textListener = new TextListener();
            
    CreateVectorVisualPanel1(CreateVectorWizardPanel1 controller) {
        this.controller = controller;
        initComponents();
    }

    @Override
    public String getName() {
        return Bundle.LBL_CreateVectorVisualPanel1_Name();
    }
    
    void setProject(Project project) {
        if(project == null) {
            projectText.setText(null);
            cop = null;
        } else {
            projectText.setText(ProjectUtils.getInformation(project).getDisplayName());
            cop = project.getLookup().lookup(NamedCalculationProvider.class);
        }
        
        boolean enabled = cop != null;
        nameText.setEnabled(enabled);
        folderText.setEnabled(enabled);
        browseButton.setEnabled(enabled);
    }
    
    void setFolder(DataFolder folder) {
        if(cop != null) {
            FileObject root = cop.getRoot();
            String path = FileUtil.getRelativePath(root, folder.getPrimaryFile());
            folderText.setText(path);
        }        
    }
    
    NamedCalculationProvider getObjectProvider() {
        return cop;
    }

    String getCalculationName() {
        return nameText.getText();
    }
    
    String getCalculationFolder() {
        return folderText.getText();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        projectLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        folderLabel = new javax.swing.JLabel();
        pathLabel = new javax.swing.JLabel();
        projectText = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        folderText = new javax.swing.JTextField();
        pathText = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        filler = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(projectLabel, org.openide.util.NbBundle.getMessage(CreateVectorVisualPanel1.class, "CreateVectorVisualPanel1.projectLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(projectLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(CreateVectorVisualPanel1.class, "CreateVectorVisualPanel1.nameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(nameLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(folderLabel, org.openide.util.NbBundle.getMessage(CreateVectorVisualPanel1.class, "CreateVectorVisualPanel1.folderLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(folderLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(CreateVectorVisualPanel1.class, "CreateVectorVisualPanel1.pathLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(pathLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(projectText, null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(projectText, gridBagConstraints);

        nameText.setText(null);
        nameText.setEnabled(false);
        nameText.getDocument().addDocumentListener(textListener);
        TextPrompt.createStandard(Bundle.PROMPT_CreateVectorVisualPanel1_Name(), nameText);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(nameText, gridBagConstraints);

        folderText.setText(null);
        folderText.setEnabled(false);
        folderText.getDocument().addDocumentListener(textListener);
        TextPrompt.createStandard(Bundle.PROMPT_CreateVectorVisualPanel1_Folder(), folderText);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(folderText, gridBagConstraints);

        pathText.setEditable(false);
        pathText.setText(null);
        pathText.getDocument().addDocumentListener(textListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(pathText, gridBagConstraints);

        browseButton.setIcon(CommonIcons.search());
        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(CreateVectorVisualPanel1.class, "CreateVectorVisualPanel1.browseButton.text")); // NOI18N
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        add(browseButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String folder = NamedContentUtil.userSelectFolder(cop);
        if(folder != null) {
            folderText.setText(folder);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.Box.Filler filler;
    private javax.swing.JLabel folderLabel;
    private javax.swing.JTextField folderText;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathText;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JLabel projectText;
    // End of variables declaration//GEN-END:variables

    private class TextListener implements DocumentListener {

        @Override
        public void changedUpdate(DocumentEvent e) {
        }
        
        @Override
        public void insertUpdate(DocumentEvent e) {
            update(e);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            update(e);
        }
        
        private void update(DocumentEvent e) {
            if(pathText.getDocument() == e.getDocument()) {
                controller.panelChanged();
            } else {
                pathText.setText(calculatePath());
            }
        }
        
        private String calculatePath() {
            if(cop == null)
                return null;
            String path = "";
            
            String folder = folderText.getText();
            if(folder != null && folder.length() > 0) {
                path += folder;
                if(!path.endsWith("/"))
                    path += "/";
            }
            
            String name = nameText.getText();
            if(name != null && name.length() > 0)
                path += name;
            
            return path;
        }
    }
}
