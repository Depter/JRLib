/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.misc.flamingo.settings;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import org.pushingpixels.substance.api.SubstanceLookAndFeel;
import org.pushingpixels.substance.api.skin.SkinInfo;

final class GuiPanel extends javax.swing.JPanel {

    private final GuiOptionsPanelController controller;
    private String installedSkin;
    
    GuiPanel(GuiOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    }
    
    private Object[] getSkinInfos() {
        List<SkinInfo> infos = new ArrayList<SkinInfo>();
        infos.addAll(SubstanceLookAndFeel.getAllSkins().values());
        Collections.sort(infos, new SkinComparator());
        return infos.toArray();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        skinLabel = new javax.swing.JLabel();
        skinCombo = new javax.swing.JComboBox();
        filler = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(skinLabel, org.openide.util.NbBundle.getMessage(GuiPanel.class, "GuiPanel.skinLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(skinLabel, gridBagConstraints);

        skinCombo.setModel(new DefaultComboBoxModel(getSkinInfos()));
        skinCombo.setRenderer(new SkinRenderer());
        skinCombo.addActionListener(new SkinListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        add(skinCombo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        installedSkin = GuiSettings.getSkinClass();
        skinCombo.setSelectedItem(getSkinInfo(installedSkin));
    }
    
    private SkinInfo getSkinInfo(String className) {
        if(className == null || className.length() == 0)
            return null;
        for(SkinInfo info : SubstanceLookAndFeel.getAllSkins().values())
            if(info.getClassName().equals(className))
                return info;
        return null;
    } 

    void store() {
        GuiSettings.setSkinClass(installedSkin);
    }

    boolean valid() {
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler;
    private javax.swing.JComboBox skinCombo;
    private javax.swing.JLabel skinLabel;
    // End of variables declaration//GEN-END:variables

    private class SkinListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            SkinInfo info = (SkinInfo) skinCombo.getSelectedItem();
            if(info == null || installedSkin.equals(info.getClassName()))
                return;
            installedSkin = info.getClassName();
            SubstanceLookAndFeel.setSkin(installedSkin);
            controller.changed();
        }
        
    }
    
    private static class SkinComparator implements Comparator<SkinInfo> {
        @Override
        public int compare(SkinInfo o1, SkinInfo o2) {
            return o1.getDisplayName().compareTo(o2.getDisplayName());
        }
    }
    
    private static class SkinRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if(value instanceof SkinInfo)
                value = ((SkinInfo)value).getDisplayName();
            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus); //To change body of generated methods, choose Tools | Templates.
        }
    }
}
