/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.excel.template.dataimport.editor;

import java.util.ArrayList;
import java.util.List;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.gui.excel.template.dataimport.DataImportTemplate;
import org.jreserve.gui.excel.template.dataimport.DataImportTemplateItem;
import org.jreserve.gui.excel.template.dataimport.createwizard.SourceType;
import org.jreserve.gui.excel.template.dataimport.createwizard.TemplateRow;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
public class DataImportTemplateEditor extends javax.swing.JPanel {

    private final InputListener inputListenr = new InputListener();
    private final DataImportTemplate template;
    private final List<TemplateRow> originalRows;
    
    private DataImportTemplateEditor(DataImportTemplate template) {
        this.template = template;
        this.originalRows = createRows();
        initComponents();
    }
    
    private List<TemplateRow> createRows() {
        List<TemplateRow> result = new ArrayList<TemplateRow>();
        for(DataImportTemplateItem item : template.getItems())
            result.add(createRow(item));
        return result;
    }
    
    private TemplateRow createRow(DataImportTemplateItem item) {
        TemplateRow row = new TemplateRow();
        row.setDataType(item.getDataType());
        row.setReference(item.getReference());
        row.setCummulated(item.isCummulated());
        if(item instanceof DataImportTemplateItem.Table) {
            row.setSourceType(SourceType.TABLE);
        } else {
            row.setSourceType(SourceType.TRIANGLE);
            DataImportTemplateItem.Triangle tItem = (DataImportTemplateItem.Triangle) item;
            row.setMonthDate(tItem.getStartDate());
            row.setAccidentLength(tItem.getAccidentLength());
            row.setDevelopmentLength(tItem.getDevelopmentLength());
        }
        return row;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        itemsLabel = new javax.swing.JLabel();
        table = new org.jreserve.gui.excel.template.dataimport.createwizard.ImportTemplateItemTable();
        pBar = new javax.swing.JProgressBar();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(DataImportTemplateEditor.class, "DataImportTemplateEditor.nameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 30, 5);
        add(nameLabel, gridBagConstraints);

        nameText.setText(template.getName());
        nameText.getDocument().addDocumentListener(inputListenr);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 30, 0);
        add(nameText, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(itemsLabel, org.openide.util.NbBundle.getMessage(DataImportTemplateEditor.class, "DataImportTemplateEditor.itemsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        add(itemsLabel, gridBagConstraints);

        table.addChangeListener(inputListenr);
        table.setRows(originalRows);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 30, 0);
        add(table, gridBagConstraints);

        pBar.setVisible(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(pBar, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel itemsLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JProgressBar pBar;
    private org.jreserve.gui.excel.template.dataimport.createwizard.ImportTemplateItemTable table;
    // End of variables declaration//GEN-END:variables

    private void validateInput() {
    
    }
    
    private class InputListener implements DocumentListener, ChangeListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            validateInput();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            validateInput();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
        }

        @Override
        public void stateChanged(ChangeEvent e) {
            validateInput();
        }
    }
}
