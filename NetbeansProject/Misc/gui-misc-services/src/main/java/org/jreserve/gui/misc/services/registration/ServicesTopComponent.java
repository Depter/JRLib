/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.misc.services.registration;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//org.jreserve.gui.misc.services.registration//Services//EN",
    autostore = false
)
@TopComponent.Description(
    preferredID = "ServicesTopComponent",
    iconBase = "org/jreserve/gui/misc/services/service_manager.png",
    persistenceType = TopComponent.PERSISTENCE_ONLY_OPENED
)
@TopComponent.Registration(
    mode = "explorer", 
    openAtStartup = true, 
    position = 300
)
@ActionID(
    category = "Window", 
    id = "org.jreserve.gui.misc.services.registration.ServicesTopComponent"
)
@ActionReferences({
    @ActionReference(path = "Menu/Window", position = 1000),
    @ActionReference(path = "Ribbon/TaskPanes/Windows/Utilities", position = 2000)
})
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_ServicesAction",
    preferredID = "ServicesTopComponent"
)
@Messages({
    "CTL_ServicesAction=Services",
    "CTL_ServicesTopComponent=Services"
})
public final class ServicesTopComponent extends TopComponent implements ExplorerManager.Provider {
    
    private final static ExplorerManager em = new ExplorerManager();
    
    public ServicesTopComponent() {
        initComponents();
        setName(Bundle.CTL_ServicesTopComponent());
        
        em.setRootContext(createRootNode());
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    }
    
    private Node createRootNode() {
        AbstractNode node = new AbstractNode(Children.create(new ServiceRootChildFactory(), true));
        node.setDisplayName("root");
        return node;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tree = new org.openide.explorer.view.BeanTreeView();

        setLayout(new java.awt.BorderLayout());

        tree.setRootVisible(false);
        add(tree, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView tree;
    // End of variables declaration//GEN-END:variables
    
    @Override public void componentOpened() {}
    @Override public void componentClosed() {}
    void writeProperties(java.util.Properties p) {}
    void readProperties(java.util.Properties p) {}

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
