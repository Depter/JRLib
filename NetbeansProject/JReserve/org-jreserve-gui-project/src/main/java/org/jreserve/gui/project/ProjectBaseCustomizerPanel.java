/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.project;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.gui.project.api.ProjectConfigurator;
import org.netbeans.spi.project.ui.support.ProjectCustomizer;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "MSG.ProjectBaseCustomizerPanel.Name.Empty=Name is empty!",
    "MSG.ProjectBaseCustomizerPanel.Description.Empty=Description is empty!"
})
public class ProjectBaseCustomizerPanel extends javax.swing.JPanel {
    
    private final static String NAME_PROP = "name";
    private final static String DESCRIPTION_PROP = "description";
    
    private ProjectCustomizer.Category category;
    private Lookup lkp;
    private InputListener inputListener = new InputListener();
    
    /**
     * Creates new form ProjectBaseCustomizerPanel
     */
    public ProjectBaseCustomizerPanel(ProjectCustomizer.Category category, Lookup lookup) {
        this.lkp = lookup;
        this.category = category;
        initComponents();
        readValues();
        checkValidity();
    }
    
    private void readValues() {
        ProjectConfigurator.Manager config = lkp.lookup(ProjectConfigurator.Manager.class);
        if(config != null) {
            ProjectConfigurator base = config.getConfigurator("org.jreserve.gui.project");
            nameText.setText(base.getProperty(NAME_PROP));
            descriptionText.setText(base.getProperty(DESCRIPTION_PROP));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        nameLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        descriptionScroll = new javax.swing.JScrollPane();
        descriptionText = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(ProjectBaseCustomizerPanel.class, "ProjectBaseCustomizerPanel.nameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(nameLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(descriptionLabel, org.openide.util.NbBundle.getMessage(ProjectBaseCustomizerPanel.class, "ProjectBaseCustomizerPanel.descriptionLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        add(descriptionLabel, gridBagConstraints);

        nameText.setText(null);
        nameText.getDocument().addDocumentListener(inputListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        add(nameText, gridBagConstraints);

        descriptionText.setColumns(20);
        descriptionText.setRows(5);
        descriptionText.getDocument().addDocumentListener(inputListener);
        descriptionScroll.setViewportView(descriptionText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(descriptionScroll, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JScrollPane descriptionScroll;
    private javax.swing.JTextArea descriptionText;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    // End of variables declaration//GEN-END:variables
    
    
    private void checkValidity() {
        boolean isValid = isNameValid();
        category.setValid(isValid);
        if(isValid)
            category.setErrorMessage(null);
    }
    
    private boolean isNameValid() {
        String str = nameText.getText();
        if(str == null || str.trim().length()==0) {
            category.setErrorMessage(Bundle.MSG_ProjectBaseCustomizerPanel_Name_Empty());
            return false;
        }
        return true;
    }
    
    private class InputListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            changeEvent(e);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            changeEvent(e);
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            changeEvent(e);
        }
        
        private void changeEvent(DocumentEvent evt) {
            checkValidity();
        }
    }
}
