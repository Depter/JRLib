/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.excel.dataimport;

import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.JTextComponent;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Name;
import org.apache.poi.ss.usermodel.Workbook;
import org.jreserve.gui.data.api.ImportUtil;
import org.jreserve.gui.excel.ExcelFileFilter;
import org.jreserve.gui.excel.ExcelReader;
import org.jreserve.gui.misc.utils.notifications.FileDialog;
import org.jreserve.gui.misc.utils.widgets.TextPrompt;
import org.jreserve.jrlib.gui.data.DataEntry;
import org.jreserve.jrlib.gui.data.MonthDate;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Task;
import org.openide.util.TaskListener;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "LBL.ExcelTableImportVisualPanel.Name=Excel Settings",
    "LBL.ExcelTableImportVisualPanel.FileDialogTitle=Select Excel File",
    "LBL.ExcelTableImportVisualPanel.PathPrompt=Select input file"
})
class ExcelTableImportVisualPanel extends javax.swing.JPanel {
    private final static String REFRESH_IMG = "org/jreserve/gui/misc/utils/refresh.png";   //NOI18
    private final static String SEARCH_IMG = "org/jreserve/gui/misc/utils/search.png";   //NOI18

    private final ExcelTableImportWizardPanel controller;
    private final CellRenderer renderer = new CellRenderer();
    private final ReferenceModel referenceModel = new ReferenceModel();
    private final ExcelTableModel tableModel = new ExcelTableModel();
    private Workbook wb;
    private JTextComponent referenceText;
    
    ExcelTableImportVisualPanel(ExcelTableImportWizardPanel controller) {
        this.controller = controller;
        initComponents();
        TextPrompt.createStandard("Select range...", referenceText);
    }
    
    @Override
    public String getName() {
        return Bundle.LBL_ExcelTableImportVisualPanel_Name();
    }
    
    void setVector(boolean isVector) {
        
    }
    
    Workbook getWorkbook() {
        return wb;
    }
    
    String getReference() {
        return referenceText.getText();
    }
    
    List<DataEntry> getEntries() {
        return tableModel.getEntries(renderer.isVector);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pathLabel = new javax.swing.JLabel();
        pathText = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        referenceLabel = new javax.swing.JLabel();
        referenceCombo = new javax.swing.JComboBox();
        vectorLabel = new javax.swing.JLabel();
        vectorCheck = new javax.swing.JCheckBox();
        tableLabel = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        tableScroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        pBar = new javax.swing.JProgressBar();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(ExcelTableImportVisualPanel.class, "ExcelTableImportVisualPanel.pathLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(pathLabel, gridBagConstraints);

        pathText.setEditable(false);
        pathText.setText(null);
        pathText.setFocusable(false);
        TextPrompt.createStandard(Bundle.LBL_ExcelTableImportVisualPanel_PathPrompt(), pathText);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(pathText, gridBagConstraints);

        browseButton.setIcon(ImageUtilities.loadImageIcon(SEARCH_IMG, false));
        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(ExcelTableImportVisualPanel.class, "ExcelTableImportVisualPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(browseButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(referenceLabel, org.openide.util.NbBundle.getMessage(ExcelTableImportVisualPanel.class, "ExcelTableImportVisualPanel.referenceLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(referenceLabel, gridBagConstraints);

        referenceCombo.setEditable(true);
        referenceCombo.setModel(referenceModel);
        referenceCombo.setEnabled(false);
        referenceCombo.setRenderer(new ReferenceRenderer());
        referenceText = (JTextComponent) referenceCombo.getEditor().getEditorComponent();
        referenceText.getDocument().addDocumentListener(new InputListener());
        referenceCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referenceComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(referenceCombo, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(vectorLabel, org.openide.util.NbBundle.getMessage(ExcelTableImportVisualPanel.class, "ExcelTableImportVisualPanel.vectorLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 30, 5);
        add(vectorLabel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(vectorCheck, null);
        vectorCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vectorCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 30, 0);
        add(vectorCheck, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(tableLabel, org.openide.util.NbBundle.getMessage(ExcelTableImportVisualPanel.class, "ExcelTableImportVisualPanel.tableLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(tableLabel, gridBagConstraints);

        refreshButton.setIcon(ImageUtilities.loadImageIcon(REFRESH_IMG, false));
        org.openide.awt.Mnemonics.setLocalizedText(refreshButton, org.openide.util.NbBundle.getMessage(ExcelTableImportVisualPanel.class, "ExcelTableImportVisualPanel.refreshButton.text")); // NOI18N
        refreshButton.setEnabled(false);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        add(refreshButton, gridBagConstraints);

        tableScroll.setPreferredSize(new java.awt.Dimension(350, 150));

        table.setModel(tableModel);
        table.setDefaultRenderer(Cell.class, renderer);
        tableScroll.setViewportView(table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(tableScroll, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(pBar, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        File f = FileDialog.openFile(new ExcelFileFilter(), Bundle.LBL_ExcelTableImportVisualPanel_FileDialogTitle());
        referenceCombo.setEnabled(f != null);
        if(f != null) {
            pathText.setText(f.getAbsolutePath());
            readExcel(f);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refreshTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void refreshTable() {
        String ref = referenceText.getText();
        if(ref != null && ref.length()>0 && wb != null)
            tableModel.readData(wb, ref);
    }
    
    private void vectorCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vectorCheckActionPerformed
        renderer.isVector = vectorCheck.isSelected();
        table.repaint();
        table.revalidate();
    }//GEN-LAST:event_vectorCheckActionPerformed

    private void referenceComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referenceComboActionPerformed
        refreshTable();
    }//GEN-LAST:event_referenceComboActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JProgressBar pBar;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathText;
    private javax.swing.JComboBox referenceCombo;
    private javax.swing.JLabel referenceLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable table;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JCheckBox vectorCheck;
    private javax.swing.JLabel vectorLabel;
    // End of variables declaration//GEN-END:variables
    
    private void readExcel(File file) {
        setProcessRunning(true);
        final ExcelReader reader = new ExcelReader(file);
        Task task = ImportUtil.getRP().create(reader);
        task.addTaskListener(new TaskListener() {
            @Override
            public void taskFinished(Task task) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            wb = reader.getWorkbook();
                        } catch (Exception ex) {
                            //TODO show error
                        } finally {
                            referenceModel.update();
                            setProcessRunning(false);
                        }
//                        if(prevModel != null) {
//                            prevModel.setHasColumnTitles(columnHeaderCheck.isSelected());
//                            prevModel.setCellSeparator(separatorEditor.getText());
//                            prevModel.setLines(reader.readLines());
//                            setPreviewColumnWidths();
//                        }
                    }
                });
            }
        });
        ImportUtil.getRP().execute(task);
    }
    
    private void setProcessRunning(boolean running) {
        pBar.setVisible(running);
        pBar.setIndeterminate(running);
        browseButton.setEnabled(!running);
        referenceCombo.setEnabled(!running);
        refreshButton.setEnabled(!running);
    }
    
    private class ReferenceModel extends AbstractListModel implements ComboBoxModel {
        
        private List<String> names = new ArrayList<String>();
        private Object selected;
        
        private void update() {
            removeOldNames();
            addNewNames();
            if(!names.isEmpty())
                fireIntervalAdded(this, 0, names.size()-1);
        }
        
        private void removeOldNames() {
            int size = names.size();
            if(size > 0 ) {
                names.clear();
                fireIntervalRemoved(this, 0, size-1);
            }
        }
        
        private void addNewNames() {
            int size = wb==null? 0 : wb.getNumberOfNames();
            for(int i=0; i<size; i++) {
                Name name = wb.getNameAt(i);
                if(shouldAddName(name))
                    names.add(name.getNameName());
            }
        }
        
        private boolean shouldAddName(Name name) {
            return !name.isFunctionName() && 
                   !name.isDeleted() &&
                   wb.getSheetIndex(name.getNameName()) < 0;
        }
        
        @Override
        public int getSize() {
            return names==null? 0 : names.size();
        }

        @Override
        public Object getElementAt(int index) {
            return names.get(index);
        }

        @Override
        public void setSelectedItem(Object anItem) {
            this.selected = anItem;
        }

        @Override
        public Object getSelectedItem() {
            return selected;
        }
    }
    
    private class ReferenceRenderer extends DefaultListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if(value instanceof Name)
                setText(((Name)value).getNameName());
            return this;
        }
    }
    
    private class InputListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            update();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            update();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
        }
        
        private void update() {
            controller.changed();
            refreshButton.setEnabled(controller.isValid());
        }
    }
    
    private class CellRenderer extends DefaultTableCellRenderer {
        
        private final MonthDate.Factory mdf = new MonthDate.Factory();
        boolean isVector = false;
        
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            setForeground(Color.BLACK);
            Cell cell = (Cell) value;
            if(cell != null) {
                if(column==0 || (!isVector && column==1)) {
                    setText(getDate(cell));
                } else {
                    setText(""+getNumericValue(cell));
                }
            }
            return this;
        }
        
        private String getDate(Cell cell) {
            try {
                return mdf.toMonthDate(cell.getDateCellValue()).toString();
            } catch (Exception ex) {
                setForeground(Color.red);
                return getValue(cell);
            }
        }
        
        private String getValue(Cell cell) {
            switch(cell.getCellType()) {
                case Cell.CELL_TYPE_BLANK: 
                    return "N.A.";
                case Cell.CELL_TYPE_BOOLEAN: 
                    return cell.getBooleanCellValue()? "True" : "False";
                case Cell.CELL_TYPE_ERROR: 
                    return "Error";
                case Cell.CELL_TYPE_FORMULA: 
                    Object v = getFunctionValue(cell);
                    return v==null? "N.A." : v.toString();
                case Cell.CELL_TYPE_NUMERIC: 
                    return ""+ cell.getNumericCellValue();
                case Cell.CELL_TYPE_STRING: 
                    return cell.getStringCellValue();
                default:
                    return "Unkown cell type: "+cell.getCellType();
            }
        }
        
        private Object getFunctionValue(Cell cell) {
            try {
                return cell.getNumericCellValue();
            } catch (Exception ex) {
                return cell.getStringCellValue();
            }
        }
        
        private Object getNumericValue(Cell cell) {
            try {
                return cell.getNumericCellValue();
            } catch (Exception ex) {
                setForeground(Color.red);
                return getValue(cell);
            }
        }
    }
}
