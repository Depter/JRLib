/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.data.csv.settings;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle.Messages;

@Messages({
    "MSG.CSVImportSettingsPanel.CellSeparator.Empty=Cell separator is not set!"
})
final class CSVImportSettingsPanel extends javax.swing.JPanel {

    private final static String ERR_IMG = "org/netbeans/modules/dialogs/error.gif"; //NOI18
    
    private final InputListener inputListener = new InputListener();
    private final CSVImportSettingsOptionsPanelController controller;
    private boolean valid;
    private JTextComponent cellSeparatorEditor;
    
    CSVImportSettingsPanel(CSVImportSettingsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        hasRowHeaderLabel = new javax.swing.JLabel();
        rowHeaderCheck = new javax.swing.JCheckBox();
        hasColumnHeaderLabel = new javax.swing.JLabel();
        columnHeaderCheck = new javax.swing.JCheckBox();
        cellsQuotedLabel = new javax.swing.JLabel();
        cellsQuotedCheck = new javax.swing.JCheckBox();
        cellSeparatorLabel = new javax.swing.JLabel();
        cellSeparatorCombo = new javax.swing.JComboBox();
        filler = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        bottomPanel = new javax.swing.JPanel();
        msgLabel = new javax.swing.JLabel();
        defaultButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(hasRowHeaderLabel, org.openide.util.NbBundle.getMessage(CSVImportSettingsPanel.class, "CSVImportSettingsPanel.hasRowHeaderLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(hasRowHeaderLabel, gridBagConstraints);

        rowHeaderCheck.addActionListener(inputListener);
        org.openide.awt.Mnemonics.setLocalizedText(rowHeaderCheck, null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(rowHeaderCheck, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(hasColumnHeaderLabel, org.openide.util.NbBundle.getMessage(CSVImportSettingsPanel.class, "CSVImportSettingsPanel.hasColumnHeaderLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(hasColumnHeaderLabel, gridBagConstraints);

        columnHeaderCheck.addActionListener(inputListener);
        cellsQuotedCheck.addActionListener(inputListener);
        msgLabel.setIcon(ImageUtilities.loadImageIcon(ERR_IMG, false));
        org.openide.awt.Mnemonics.setLocalizedText(columnHeaderCheck, null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(columnHeaderCheck, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(cellsQuotedLabel, org.openide.util.NbBundle.getMessage(CSVImportSettingsPanel.class, "CSVImportSettingsPanel.cellsQuotedLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(cellsQuotedLabel, gridBagConstraints);

        cellsQuotedCheck.addActionListener(inputListener);
        org.openide.awt.Mnemonics.setLocalizedText(cellsQuotedCheck, null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(cellsQuotedCheck, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(cellSeparatorLabel, org.openide.util.NbBundle.getMessage(CSVImportSettingsPanel.class, "CSVImportSettingsPanel.cellSeparatorLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(cellSeparatorLabel, gridBagConstraints);

        cellSeparatorCombo.setEditable(true);
        cellSeparatorCombo.setModel(new DefaultComboBoxModel(CsvImportSettings.getCellSeparators()));
        cellSeparatorEditor = ((JTextComponent) cellSeparatorCombo.getEditor().getEditorComponent());
        cellSeparatorEditor.getDocument().addDocumentListener(inputListener);
        cellSeparatorCombo.setMinimumSize(new java.awt.Dimension(50, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        add(cellSeparatorCombo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler, gridBagConstraints);

        bottomPanel.setLayout(new java.awt.BorderLayout());

        msgLabel.setIcon(ImageUtilities.loadImageIcon(ERR_IMG, false));
        org.openide.awt.Mnemonics.setLocalizedText(msgLabel, org.openide.util.NbBundle.getMessage(CSVImportSettingsPanel.class, "CSVImportSettingsPanel.msgLabel.text")); // NOI18N
        bottomPanel.add(msgLabel, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(defaultButton, org.openide.util.NbBundle.getMessage(CSVImportSettingsPanel.class, "CSVImportSettingsPanel.defaultButton.text")); // NOI18N
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });
        bottomPanel.add(defaultButton, java.awt.BorderLayout.LINE_END);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(bottomPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        CsvImportSettings.clear();
        load();
    }//GEN-LAST:event_defaultButtonActionPerformed

    void load() {
        columnHeaderCheck.setSelected(CsvImportSettings.hasColumnHeaders());
        rowHeaderCheck.setSelected(CsvImportSettings.hasRowHeaders());
        cellsQuotedCheck.setSelected(CsvImportSettings.cellsQuoted());
        
        String sep = CsvImportSettings.getCellSeparator();
        if(sep!=null && sep.length()==1 && sep.charAt(0) == '\t')
            sep = "Tab";
        cellSeparatorCombo.setSelectedItem(sep);
        
        Dimension prefSize = cellSeparatorCombo.getPreferredSize();
        if(prefSize.width < 100) {
            prefSize.width = 100;
            cellSeparatorCombo.setPreferredSize(prefSize);
            cellSeparatorCombo.setSize(prefSize);
        }
        validateInput();
    }

    void store() {
        CsvImportSettings.setHasColumnHeaders(columnHeaderCheck.isSelected());
        CsvImportSettings.setHasRowHeaders(rowHeaderCheck.isSelected());
        CsvImportSettings.setCellsQuoted(cellsQuotedCheck.isSelected());
        
        String sep = cellSeparatorEditor.getText();
        if(sep != null && "tab".equalsIgnoreCase(sep))
            sep = "\t";
        CsvImportSettings.setCellSeparator(sep);
    }

    boolean valid() {
        return valid;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JComboBox cellSeparatorCombo;
    private javax.swing.JLabel cellSeparatorLabel;
    private javax.swing.JCheckBox cellsQuotedCheck;
    private javax.swing.JLabel cellsQuotedLabel;
    private javax.swing.JCheckBox columnHeaderCheck;
    private javax.swing.JButton defaultButton;
    private javax.swing.Box.Filler filler;
    private javax.swing.JLabel hasColumnHeaderLabel;
    private javax.swing.JLabel hasRowHeaderLabel;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JCheckBox rowHeaderCheck;
    // End of variables declaration//GEN-END:variables

    private void validateInput() {
        valid = isInputValid();
        if(valid)
            showError(null);
        controller.changed();
    }
    
    private void showError(String msg) {
        msgLabel.setText(msg);
        msgLabel.setVisible(msg != null);
    }
    
    private boolean isInputValid() {
        String str = cellSeparatorEditor.getText();
        if(str==null || str.length()==0) {
            showError(Bundle.MSG_CSVImportSettingsPanel_CellSeparator_Empty());
            return false;
        }
        return true;
    }
    
    private class InputListener implements ActionListener, DocumentListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            validateInput();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            validateInput();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            validateInput();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
        }
    }
}
