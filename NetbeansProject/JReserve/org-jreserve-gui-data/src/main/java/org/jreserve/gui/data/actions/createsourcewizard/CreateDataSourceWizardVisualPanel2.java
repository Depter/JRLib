/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.data.actions.createsourcewizard;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JList;
import org.jreserve.gui.data.api.DataType;
import org.jreserve.gui.misc.utils.widgets.WidgetUtils;
import org.netbeans.api.annotations.common.StaticResource;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "LBL.CreateDataSourceWizardVisualPanel2.Name=Storage & Type",
    "LBL.CreateDataSourceWizardVisualPanel2.Vector=Vector",
    "LBL.CreateDataSourceWizardVisualPanel2.Triangle=Triangle"
})
public class CreateDataSourceWizardVisualPanel2 extends javax.swing.JPanel {
    
    @StaticResource private final static String VECTOR_IMG = "org/jreserve/gui/data/icons/vector.png";
    @StaticResource private final static String TRIANGLE_IMG = "org/jreserve/gui/data/icons/triangle.png";
    
    private ComboListener comboListener = new ComboListener();
    
    public CreateDataSourceWizardVisualPanel2() {
        initComponents();
    }
    
    @Override
    public String getName() {
        return Bundle.LBL_CreateDataSourceWizardVisualPanel2_Name();
    }
    
    void setDataType(DataType dataType) {
        dataTypeCombo.setSelectedItem(dataType);
    }
    
    void setStorageType(DataSourceWizardAdapter st) {
        storageTypeCombo.setSelectedItem(st);
        if(st == null && storageTypeCombo.getModel().getSize() > 0)
            storageTypeCombo.setSelectedIndex(0);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dataTypeLabel = new javax.swing.JLabel();
        dataTypeCombo = new javax.swing.JComboBox();
        storageTypeLabel = new javax.swing.JLabel();
        storageTypeCombo = new javax.swing.JComboBox();
        filler = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(dataTypeLabel, org.openide.util.NbBundle.getMessage(CreateDataSourceWizardVisualPanel2.class, "CreateDataSourceWizardVisualPanel2.dataTypeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(dataTypeLabel, gridBagConstraints);

        dataTypeCombo.setModel(new DefaultComboBoxModel(DataType.values()));
        dataTypeCombo.setRenderer(new DataTypeRenderer());
        dataTypeCombo.addActionListener(comboListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        add(dataTypeCombo, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(storageTypeLabel, org.openide.util.NbBundle.getMessage(CreateDataSourceWizardVisualPanel2.class, "CreateDataSourceWizardVisualPanel2.storageTypeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 5);
        add(storageTypeLabel, gridBagConstraints);

        storageTypeCombo.setModel(new DefaultComboBoxModel(DataSourceWizardRegistry.getAdapters().toArray()));
        storageTypeCombo.setRenderer(WidgetUtils.displayableListRenderer());
        storageTypeCombo.addActionListener(comboListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(storageTypeCombo, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox dataTypeCombo;
    private javax.swing.JLabel dataTypeLabel;
    private javax.swing.Box.Filler filler;
    private javax.swing.JComboBox storageTypeCombo;
    private javax.swing.JLabel storageTypeLabel;
    // End of variables declaration//GEN-END:variables

    private class ComboListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            JComboBox combo = (JComboBox) e.getSource();
            String key = getKey(combo);
            putClientProperty(key, combo.getSelectedItem());
        }
        
        private String getKey(JComboBox combo) {
            return (dataTypeCombo == combo)?
                CreateDataSourceWizardIterator.PROP_DATA_TYPE :
                CreateDataSourceWizardIterator.PROP_SOURCE_WIZARD;
        }
    }
    
    private static class DataTypeRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus); //To change body of generated methods, choose Tools | Templates.
            if(value instanceof DataType)
                render((DataType) value);
            return this;
        }
        
        private void render(DataType type) {
            switch(type) {
                case TRIANGLE:
                    setIcon(ImageUtilities.loadImageIcon(TRIANGLE_IMG, false));
                    setText(Bundle.LBL_CreateDataSourceWizardVisualPanel2_Triangle());
                    break;
                case VECTOR:
                    setIcon(ImageUtilities.loadImageIcon(VECTOR_IMG, false));
                    setText(Bundle.LBL_CreateDataSourceWizardVisualPanel2_Vector());
                    break;
                default:
                    throw new IllegalArgumentException("Unknon DataType: "+type);
            }
        }
    }
}
