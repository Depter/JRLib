/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.grscript.gui.classpath.explorer;

import org.jreserve.grscript.gui.classpath.explorer.nodes.CpRootNode;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.jreserve.grscript.gui.classpath.explorer//ClassPathExplorer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ClassPathExplorerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.jreserve.grscript.gui.classpath.explorer.ClassPathExplorerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
//@TopComponent.OpenActionRegistration(
//        displayName = "#CTL_ClassPathExplorerAction",
//        preferredID = "ClassPathExplorerTopComponent")
@Messages({
    "CTL_ClassPathExplorerAction=Classpath Explorer",
    "CTL_ClassPathExplorerTopComponent=Classpath",
    "HINT_ClassPathExplorerTopComponent=Additionl classpath elements"
})
public final class ClassPathExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static final ExplorerManager em = new ExplorerManager();
    
    public ClassPathExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ClassPathExplorerTopComponent());
        setToolTipText(Bundle.HINT_ClassPathExplorerTopComponent());
        initExplorerManager();
    }
    
    private void initExplorerManager() {
        cpTree.setRootVisible(false);
        em.setRootContext(new CpRootNode());
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cpTree = new org.openide.explorer.view.BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(cpTree, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.view.BeanTreeView cpTree;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
    }

    void readProperties(java.util.Properties p) {
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
}
