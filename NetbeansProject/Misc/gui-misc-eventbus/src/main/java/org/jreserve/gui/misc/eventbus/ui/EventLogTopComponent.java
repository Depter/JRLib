/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.misc.eventbus.ui;

import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.JMenu;
import javax.swing.JPopupMenu;
import org.jreserve.gui.misc.eventbus.EventBusListener;
import org.jreserve.gui.misc.eventbus.EventBusManager;
import org.openide.actions.CopyAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.ImageUtilities;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.actions.SystemAction;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
    preferredID = "EventLogTopComponent",
    iconBase = "org/jreserve/gui/misc/eventbus/message.png",
    persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(
    mode = "output", 
    openAtStartup = false
)
@ActionID(
    category = "Window", 
    id = "org.jreserve.gui.misc.eventbus.ui.EventLogTopComponent"
)
@ActionReference(
    path = "Menu/Window", position = 20
)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_EventLogAction",
    preferredID = "EventLogTopComponent")
@Messages({
    "CTL_EventLogAction=EventLog",
    "CTL_EventLogTopComponent=EventLog"
})
public final class EventLogTopComponent extends TopComponent {
    
    private final static String COPY_IMG = "org/openide/resources/actions/copy.gif";    //NOI18
    private final static String CLEAR_IMG = "org/jreserve/gui/misc/eventbus/refresh.png";   //NOI18
    
    public EventLogTopComponent() {
        initComponents();
        setName(Bundle.CTL_EventLogTopComponent());
        initToolbar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        scroll = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        toolBar.setRollover(true);
        add(toolBar, java.awt.BorderLayout.PAGE_START);

        text.setEditable(false);
        text.setColumns(50);
        text.setRows(10);
        text.addMouseListener(new PopUpListener());
        scroll.setViewportView(text);

        add(scroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTextArea text;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void componentOpened() {
        EventBusManager.getDefault().subscribe(this);
    }

    @Override
    public void componentClosed() {
        EventBusManager.getDefault().unsubscribe(this);
        text.setText(null);
    }
    
    @EventBusListener(forceEDT = true)
    public void objectHappened(Object evt) {
        String txt = text.getText();
        if(txt == null || txt.length()==0) {
            txt = evt.toString();
        } else {
            txt += evt.toString();
        }
        text.setText(txt+"\n");
    }
    
    private void initToolbar() {
        toolBar.setBorderPainted(false);
        toolBar.setRollover(true);
        toolBar.setFloatable(false);
        
        CopyAction ca = SystemAction.get(CopyAction.class);
        getActionMap().put(ca.getActionMapKey(), new CopyTextAction());
        toolBar.add(ca);
        toolBar.add(Box.createHorizontalStrut(5));
        
        toolBar.add(new ClearTextAction());
    }
    
    private class CopyTextAction extends AbstractAction {

        CopyTextAction() {
            putValue(SHORT_DESCRIPTION, "Copy");
            putValue(SHORT_DESCRIPTION, "Copy contents");
            putValue(SMALL_ICON, ImageUtilities.loadImageIcon(COPY_IMG, false));
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            StringSelection sel = new StringSelection(text.getText());
            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
            if(cb != null)
                cb.setContents(sel, null);
        }
    }
    
    private class ClearTextAction extends AbstractAction {

        public ClearTextAction() {
            putValue(NAME, "Clear");
            putValue(SHORT_DESCRIPTION, "Clear Message list...");
            putValue(SMALL_ICON, ImageUtilities.loadImageIcon(CLEAR_IMG, false));
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            text.setText(null);
        }
    }
    
    private class PopUpListener extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            if(e.isPopupTrigger()) {
                JPopupMenu popUp = new JPopupMenu();
                popUp.add(new CopyTextAction());
                popUp.add(new ClearTextAction());
                Point p = e.getPoint();
                popUp.show(text, p.x, p.y);
            }
        }
    
    }
}
