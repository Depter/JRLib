/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.calculations.util;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import org.jreserve.gui.calculations.api.DefaultColor;
import org.jreserve.gui.misc.utils.widgets.ColorChooserDialog;
import org.jreserve.gui.misc.utils.widgets.CommonIcons;
import org.jreserve.gui.misc.utils.widgets.TextPrompt;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "PROMPT.CalculationColorsPanel.Search=Seatch color"
})
final class CalculationColorsPanel extends javax.swing.JPanel {
    
    private final CalculationColorsOptionsPanelController controller;
    private List<DefaultColorAdapter> colors;
    private ColorTableModel tableModel = new ColorTableModel();
    
    CalculationColorsPanel(CalculationColorsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        searchPanel = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        colorTable = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        buttonPanel = new javax.swing.JPanel();
        defaultButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.BorderLayout(10, 10));

        searchPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(searchLabel, org.openide.util.NbBundle.getMessage(CalculationColorsPanel.class, "CalculationColorsPanel.searchLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        searchPanel.add(searchLabel, gridBagConstraints);

        searchText.setText(null);
        searchText.getDocument().addDocumentListener(new SearchListener());
        TextPrompt.createStandard(Bundle.PROMPT_CalculationColorsPanel_Search(), CommonIcons.search(), searchText);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        searchPanel.add(searchText, gridBagConstraints);

        add(searchPanel, java.awt.BorderLayout.PAGE_START);

        colorTable.setPreferredSize(new java.awt.Dimension(200, 100));

        table.setModel(tableModel);
        table.setDefaultRenderer(Color.class, new TableColorRenderer());
        table.addMouseListener(new TableMouseListener());
        colorTable.setViewportView(table);

        add(colorTable, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(defaultButton, org.openide.util.NbBundle.getMessage(CalculationColorsPanel.class, "CalculationColorsPanel.defaultButton.text")); // NOI18N
        defaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(defaultButton);

        add(buttonPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void defaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultButtonActionPerformed
        for(DefaultColorAdapter color : colors)
            DefaultColor.setColor(color.getId(), null);
        
        searchText.setText(null);
        tableModel.setColors(colors);
        controller.changed();
    }//GEN-LAST:event_defaultButtonActionPerformed

    void load() {
        colors = DefaultColorRegistry.getColors();
        Collections.sort(colors, new ColorComparator());
        tableModel.setColors(colors);
    }

    void store() {
    }

    boolean valid() {
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JScrollPane colorTable;
    private javax.swing.JButton defaultButton;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchText;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private static class ColorComparator implements Comparator<DefaultColorAdapter> {
        @Override
        public int compare(DefaultColorAdapter o1, DefaultColorAdapter o2) {
            String n1 = o1.getDisplayName();
            String n2 = o2.getDisplayName();
            return n1.compareTo(n2);
        }
    }
    
    private static class TableColorRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            hasFocus = false;
            super.getTableCellRendererComponent(table, null, isSelected, hasFocus, row, column);
            setBackground((Color) value);
            return this;
        }
    }
    
    private class TableMouseListener extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            Point p = e.getPoint();
            int column = table.columnAtPoint(p);
            if(column != 1)
                return;
            
            int row = table.rowAtPoint(p);
            if(row < 0)
                return;
            
            Color initColor = (Color) tableModel.getValueAt(row, column);
            Color color = ColorChooserDialog.selectColor(initColor);
            if(color != null) {
                DefaultColorAdapter dfa = tableModel.getColorAt(row);
                DefaultColor.setColor(dfa.getId(), color);
                tableModel.fireTableCellUpdated(row, column);
            }
        }
    }
    
    private class SearchListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            search();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            search();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
        }
        
        private void search() {
            String str = searchText.getText();
            List<DefaultColorAdapter> filtered = new ArrayList<DefaultColorAdapter>(colors);
            
            if(str != null && str.length() > 0) {
                str = str.toLowerCase();
                Iterator<DefaultColorAdapter> it = filtered.iterator();
                while(it.hasNext()) {
                    String name = it.next().getDisplayName().toLowerCase();
                    if(name.indexOf(str) < 0)
                        it.remove();
                }
            }
            
            tableModel.setColors(filtered);
            controller.changed();
        }
        
    }
}
