/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.misc.namedcontent.folder;

import java.util.Collection;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.gui.misc.namedcontent.NamedContentProvider;
import org.jreserve.gui.misc.namedcontent.NamedContentUtil;
import org.jreserve.gui.misc.utils.widgets.CommonIcons;
import org.jreserve.gui.misc.utils.widgets.TextPrompt;
import org.jreserve.gui.misc.utils.widgets.WidgetUtils;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataFolder;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "LBL.CreateFolderVisualPanel.Title=Create Folder",
    "LBL.CreateFolderVisualPanel.Prompt.Name=Name of the folder",
    "LBL.CreateFolderVisualPanel.Prompt.ParentFolder=Path to parent folder"
})
class CreateFolderVisualPanel extends javax.swing.JPanel {

    private final CreateFolderWizardPanel controller;
    private TextListener textListener = new TextListener();
    
    CreateFolderVisualPanel(CreateFolderWizardPanel controller) {
        this.controller = controller;
        initComponents();
    }
    
    @Override
    public String getName() {
        return Bundle.LBL_CreateFolderVisualPanel_Title();
    }

    void setProviders(Collection<? extends NamedContentProvider> providers) {
        locationCombo.setModel(new DefaultComboBoxModel(providers.toArray(new NamedContentProvider[providers.size()])));
        locationCombo.setSelectedItem(null);
    }
    
    void setSelectedProvider(NamedContentProvider provider) {
        locationCombo.setSelectedItem(provider);
    }
    
    void setFolder(String folder) {
        parentText.setText(folder);
    }
    
    NamedContentProvider getProvider() {
        return (NamedContentProvider) locationCombo.getSelectedItem();
    }
    
    String getFolderName() {
        return nameText.getText();
    }
    
    String getPath() {
        return pathText.getText();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        locationLabel = new javax.swing.JLabel();
        locationCombo = new javax.swing.JComboBox();
        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        parentLabel = new javax.swing.JLabel();
        parentText = new javax.swing.JTextField();
        browseParentButton = new javax.swing.JButton();
        pathLabel = new javax.swing.JLabel();
        filler = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        pathText = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(locationLabel, org.openide.util.NbBundle.getMessage(CreateFolderVisualPanel.class, "CreateFolderVisualPanel.locationLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(locationLabel, gridBagConstraints);

        locationCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        locationCombo.setRenderer(WidgetUtils.displayableListRenderer());
        locationCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(locationCombo, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(CreateFolderVisualPanel.class, "CreateFolderVisualPanel.nameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(nameLabel, gridBagConstraints);

        nameText.setText(null);
        nameText.getDocument().addDocumentListener(textListener);
        TextPrompt.createStandard(Bundle.LBL_CreateFolderVisualPanel_Prompt_Name(), nameText);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(nameText, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(parentLabel, org.openide.util.NbBundle.getMessage(CreateFolderVisualPanel.class, "CreateFolderVisualPanel.parentLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(parentLabel, gridBagConstraints);

        parentText.setText(null);
        parentText.getDocument().addDocumentListener(textListener);
        TextPrompt.createStandard(Bundle.LBL_CreateFolderVisualPanel_Prompt_ParentFolder(), parentText);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(parentText, gridBagConstraints);

        browseParentButton.setIcon(CommonIcons.search());
        org.openide.awt.Mnemonics.setLocalizedText(browseParentButton, org.openide.util.NbBundle.getMessage(CreateFolderVisualPanel.class, "CreateFolderVisualPanel.browseParentButton.text")); // NOI18N
        browseParentButton.setEnabled(false);
        browseParentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseParentButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        add(browseParentButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(CreateFolderVisualPanel.class, "CreateFolderVisualPanel.pathLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(pathLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler, gridBagConstraints);

        pathText.setEditable(false);
        pathText.setText(null);
        pathText.getDocument().addDocumentListener(textListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(pathText, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void locationComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationComboActionPerformed
        NamedContentProvider provider = getProvider();
        boolean enable = provider != null;
        browseParentButton.setEnabled(enable);
        nameText.setEnabled(enable);
        parentText.setEnabled(enable);
        parentText.setText(null);
        controller.panelChanged();
    }//GEN-LAST:event_locationComboActionPerformed

    private void browseParentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseParentButtonActionPerformed
        NamedContentProvider provider = getProvider();
        String folder = NamedContentUtil.userSelectFolder(provider);
        if(folder != null) {
            parentText.setText(folder);
        }
    }//GEN-LAST:event_browseParentButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseParentButton;
    private javax.swing.Box.Filler filler;
    private javax.swing.JComboBox locationCombo;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel parentLabel;
    private javax.swing.JTextField parentText;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathText;
    // End of variables declaration//GEN-END:variables

    private class TextListener implements DocumentListener {

        @Override
        public void changedUpdate(DocumentEvent e) {
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            update(e);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            update(e);
        }
        
        private void update(DocumentEvent e) {
            if(e.getDocument() == pathText.getDocument())
                controller.panelChanged();
            else
                updatePath();
        }
        
        private void updatePath() {
            String path = escapeFolder() + escapeName();
            pathText.setText(path);
        }
        
        private String escapeFolder() {
            String folder = parentText.getText();
            if(folder == null)
                folder = "";
            if(folder.length() > 0 && ! folder.endsWith("/"))
                folder += "/";
            return folder;
        }
        
        private String escapeName() {
            String name = nameText.getText();
            return name==null? "" : name;
        }
    }
}
