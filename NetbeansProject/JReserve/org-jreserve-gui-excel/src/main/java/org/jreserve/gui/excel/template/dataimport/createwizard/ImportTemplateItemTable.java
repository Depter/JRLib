/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.excel.template.dataimport.createwizard;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collections;
import java.util.List;
import javax.swing.JTable;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import org.jreserve.gui.excel.poiutil.ReferenceUtil;
import org.jreserve.jrlib.gui.data.DataType;
import org.jreserve.jrlib.gui.data.MonthDate;
import org.openide.util.ChangeSupport;
import org.openide.util.ImageUtilities;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
public class ImportTemplateItemTable extends javax.swing.JPanel {
    private final static String IMG_ADD = "org/jreserve/gui/misc/utils/add.png";   //NOI18
    private final static String IMG_EDIT = "org/jreserve/gui/misc/utils/edit.png";   //NOI18
    private final static String IMG_ARROW_UP = "org/jreserve/gui/misc/utils/arrow_up.png";   //NOI18
    private final static String IMG_ARROW_DOWN = "org/jreserve/gui/misc/utils/arrow_down.png";   //NOI18
    private final static String IMG_DELETE = "org/jreserve/gui/misc/utils/delete.png";   //NOI18
    
    private final ChangeSupport cs = new ChangeSupport(this);
    private final ImportTemplateModel tableModel = new ImportTemplateModel();
    private ReferenceUtil refUtil;
    
    public ImportTemplateItemTable() {
        initComponents();
        checkButtonEnables();
    }
    
    public void addChangeListener(ChangeListener listener) {
        cs.addChangeListener(listener);
    }
    
    public void removeChangeListener(ChangeListener listener) {
        cs.removeChangeListener(listener);
    }
    
    public void setRows(List<TemplateRow> rows) {
        tableModel.setRows(rows);
        checkButtonEnables();
        cs.fireChange();
    }
    
    public List<TemplateRow> getRows() {
        return tableModel.getRows();
    }
    
    public void setReferenceUtil(ReferenceUtil refUtil) {
        this.refUtil = refUtil;
        table.repaint();
        table.revalidate();
    }
    
    public ReferenceUtil getReferenceUtil() {
        return refUtil;
    }
    
    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        if(enabled) {
            checkButtonEnables();
            table.setEnabled(true);
        } else {
            disableControls();
        }
    }
    
    private void disableControls() {
        table.setEnabled(false);
        addButton.setEnabled(false);
        editButton.setEnabled(false);
        upButton.setEnabled(false);
        downButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }

    private void checkButtonEnables() {
        int count = table.getSelectedRows().length;
        addButton.setEnabled(true);
        deleteButton.setEnabled(count > 0);
        if(count == 1) {
            editButton.setEnabled(true);
            
            int selected = table.getSelectedRow();
            upButton.setEnabled(selected != 0);
            int max = table.getModel().getRowCount()-1;
            downButton.setEnabled(selected < max);
        } else {
            editButton.setEnabled(false);
            upButton.setEnabled(false);
            downButton.setEnabled(false);
        }
        
        table.repaint();
        table.revalidate();
    }
    
    private boolean editRow(int index) {
        if(index >= 0) {
            TemplateRow row = tableModel.getRows().get(index);
            if(TemplateItemEditorPanel.editTemplateRow(row, getDefiendNames())) {
                tableModel.fireTableRowsUpdated(index, index);
                cs.fireChange();
                return true;
            }
        }
        return false;
    }
    
    private List<String> getDefiendNames() {
        if(refUtil == null)
            return Collections.EMPTY_LIST;
        return refUtil.getNames();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tableScroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        buttonPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        buttonFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setLayout(new java.awt.BorderLayout(10, 0));

        table.setModel(tableModel);
        table.getSelectionModel().addListSelectionListener(new TableSelectionListener());
        table.addMouseListener(new TableMouseListener());
        TemplateTableRenderer renderer = new TemplateTableRenderer();
        table.setDefaultRenderer(String.class, renderer);
        table.setDefaultRenderer(SourceType.class, renderer);
        table.setDefaultRenderer(DataType.class, renderer);
        table.setDefaultRenderer(MonthDate.class, renderer);
        table.setDefaultRenderer(Integer.class, renderer);
        table.setShowGrid (true);
        tableScroll.setViewportView(table);

        add(tableScroll, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        addButton.setIcon(ImageUtilities.loadImageIcon(IMG_ADD, false));
        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(ImportTemplateItemTable.class, "ImportTemplateItemTable.addButton.text")); // NOI18N
        addButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        buttonPanel.add(addButton, gridBagConstraints);

        editButton.setIcon(ImageUtilities.loadImageIcon(IMG_EDIT, false));
        org.openide.awt.Mnemonics.setLocalizedText(editButton, org.openide.util.NbBundle.getMessage(ImportTemplateItemTable.class, "ImportTemplateItemTable.editButton.text")); // NOI18N
        editButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        buttonPanel.add(editButton, gridBagConstraints);

        upButton.setIcon(ImageUtilities.loadImageIcon(IMG_ARROW_UP, false));
        org.openide.awt.Mnemonics.setLocalizedText(upButton, org.openide.util.NbBundle.getMessage(ImportTemplateItemTable.class, "ImportTemplateItemTable.upButton.text")); // NOI18N
        upButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        buttonPanel.add(upButton, gridBagConstraints);

        downButton.setIcon(ImageUtilities.loadImageIcon(IMG_ARROW_DOWN, false));
        org.openide.awt.Mnemonics.setLocalizedText(downButton, org.openide.util.NbBundle.getMessage(ImportTemplateItemTable.class, "ImportTemplateItemTable.downButton.text")); // NOI18N
        downButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        buttonPanel.add(downButton, gridBagConstraints);

        deleteButton.setIcon(ImageUtilities.loadImageIcon(IMG_DELETE, false));
        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, org.openide.util.NbBundle.getMessage(ImportTemplateItemTable.class, "ImportTemplateItemTable.deleteButton.text")); // NOI18N
        deleteButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        buttonPanel.add(deleteButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(buttonFiller, gridBagConstraints);

        add(buttonPanel, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        int[] indices = table.getSelectedRows();
        tableModel.addRow();
        
        if(!editRow(tableModel.getRowCount()-1))
            tableModel.deleteRows(tableModel.getRowCount()-1);
        
        for(int i : indices)
            table.getSelectionModel().addSelectionInterval(i, i);
        cs.fireChange();
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        editRow(table.getSelectedRow());
    }//GEN-LAST:event_editButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        int index = table.getSelectedRow();
        tableModel.moveUp(index--);
        table.getSelectionModel().setSelectionInterval(index, index);
        cs.fireChange();
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        int index = table.getSelectedRow();
        tableModel.moveDown(index++);
        table.getSelectionModel().setSelectionInterval(index, index);
        cs.fireChange();
    }//GEN-LAST:event_downButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int[] indices = table.getSelectedRows();
        if(indices.length > 0) {
            tableModel.deleteRows(indices);
            cs.fireChange();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.Box.Filler buttonFiller;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTable table;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables


    private class TableSelectionListener implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            checkButtonEnables();
        }
    }
    
    private class TemplateTableRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            value = getText(value);
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if(!isSelected) {
                super.setBackground(Color.WHITE);
                if(refUtil != null && column==0 && !isReferenceValid(value)) {
                    setForeground(Color.RED);
                } else {
                    setForeground(Color.BLACK);
                }
            }
            return this;
        }
        
        private String getText(Object value) {
            if(value instanceof String)
                return (String) value;
            else if(value instanceof Integer)
                return ""+((Integer) value).intValue();
            else if(value instanceof MonthDate)
                return ((MonthDate)value).toString();
            else if(value instanceof DataType)
                return getText((DataType)value);
            else if(value instanceof SourceType)
                return getText((SourceType)value);
            else
                return null;
        }
        
        private String getText(DataType dt) {
            switch(dt) {
                case TRIANGLE: return Bundle.LBL_CreateTempalteWizardVisualPanel_DataType_Triangle();
                case VECTOR: return Bundle.LBL_CreateTempalteWizardVisualPanel_DataType_Vector();
                default: throw new IllegalArgumentException("Unknown DataType: "+dt);
            }
        }
        
        private String getText(SourceType st) {
            switch(st) {
                case TABLE: return Bundle.LBL_CreateTempalteWizardVisualPanel_SoruceType_Table();
                case TRIANGLE: return Bundle.LBL_CreateTempalteWizardVisualPanel_SoruceType_Triangle();
                default: throw new IllegalArgumentException("Unknown SourceType: "+st);
            }
        }
        
        private boolean isReferenceValid(Object value) {
            return value==null || refUtil.isReferenceValid((String)value);
        }
    }
    
    private class TableMouseListener extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            if(e.getClickCount() == 2)
                editRow(table.getSelectedRow());
        }
    
    }

}
