/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.misc.utils.dataobject.selectdialog;

import java.awt.Component;
import java.awt.Image;
import java.beans.BeanInfo;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import org.jreserve.gui.misc.utils.dataobject.DataObjectChooser;
import org.jreserve.gui.misc.utils.widgets.CommonIcons;
import org.jreserve.gui.misc.utils.widgets.EmptyIcon;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.loaders.DataObject;
import org.openide.nodes.Node;
import org.openide.util.HelpCtx;
import org.openide.util.ImageUtilities;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
public class SelectDataObjectDialog extends javax.swing.JPanel {
    private final static int OPTION_ALIGN = DialogDescriptor.DEFAULT_ALIGN;
    private final static boolean MODAL = true;

    public static DataObject[] select(DataObjectChooser.Controller controller, boolean isMultiSelect) {
        SelectDataObjectDialog form = new SelectDataObjectDialog(controller, isMultiSelect);
        Object[] options = new Object[]{form.okButton, form.cancelButton};
        DialogDescriptor dd = new DialogDescriptor(form, controller.getTitle(), MODAL, options, options[0], OPTION_ALIGN, HelpCtx.DEFAULT_HELP, null);
        dd.setClosingOptions(options);
        
        if(DialogDisplayer.getDefault().notify(dd) == options[0]) {
            return form.getSelections();
        } else {
            return null;
        }
    }
    
    private DataObjectChooser.Controller controller;
    private DataObjecTreeModel model;
    private boolean isMultiSelect = false;
    private DataObject[] selection;
    
    private SelectDataObjectDialog(DataObjectChooser.Controller controller, boolean isMultiSelect) {
        this.controller = controller;
        this.model = new DataObjecTreeModel(controller);
        this.isMultiSelect = isMultiSelect;
        initComponents();
        okButton.setEnabled(false);
    }

    private DataObject[] getSelections() {
        return selection;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        treeScroll = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        okButton.setIcon(CommonIcons.ok());
        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(SelectDataObjectDialog.class, "SelectDataObjectDialog.okButton.text")); // NOI18N

        cancelButton.setIcon(CommonIcons.cancel());
        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(SelectDataObjectDialog.class, "SelectDataObjectDialog.cancelButton.text")); // NOI18N

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.BorderLayout(12, 12));

        treeScroll.setPreferredSize(new java.awt.Dimension(150, 250));

        tree.setModel(model);
        tree.setRootVisible(false);
        tree.addTreeSelectionListener(new SelectionListener());
        tree.setCellRenderer(new Renderer());
        treeScroll.setViewportView(tree);

        add(treeScroll, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JTree tree;
    private javax.swing.JScrollPane treeScroll;
    // End of variables declaration//GEN-END:variables

    private class SelectionListener implements TreeSelectionListener {

        @Override
        public void valueChanged(TreeSelectionEvent e) {
            selection = getSelectedObjects();
            okButton.setEnabled(isValidSelection());
        }
    
        private DataObject[] getSelectedObjects() {
            TreePath[] pathes = tree.getSelectionPaths();
            DataObject[] result = new DataObject[pathes.length];
            for(int i=0; i<pathes.length; i++)
                result[i] = (DataObject) pathes[i].getLastPathComponent();
            return result;
        }
        
        private boolean isValidSelection() {
            if(selection.length == 0)
                return false;
            if(!isMultiSelect && selection.length > 1)
                return false;
            
            for(DataObject obj : selection)
                if(!controller.canSelectObject(obj))
                    return false;
            return true;
        }
    }
    
    private class Renderer extends DefaultTreeCellRenderer {

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
            if(value instanceof DataObject) {
                Node node = ((DataObject)value).getNodeDelegate();
                String name = node.getHtmlDisplayName();
                if(name == null || name.length()==0)
                    name = node.getDisplayName();
                setText(name);
                
                Image img = node.getIcon(BeanInfo.ICON_COLOR_16x16);
                if(img != null)
                    setIcon(ImageUtilities.image2Icon(img));
                else
                    setIcon(EmptyIcon.EMPTY_16);
            }
            return this;
        }
        
    }
}
