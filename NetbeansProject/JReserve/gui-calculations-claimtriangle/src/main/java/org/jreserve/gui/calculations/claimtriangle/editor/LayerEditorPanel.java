/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.calculations.claimtriangle.editor;

import java.awt.Component;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import org.jreserve.gui.calculations.api.CalculationEvent;
import org.jreserve.gui.calculations.api.CalculationModifier;
import org.jreserve.gui.calculations.claimtriangle.impl.ClaimTriangleCalculationImpl;
import org.jreserve.gui.calculations.claimtriangle.modifications.ClaimTriangleCorrectionModifier;
import org.jreserve.gui.misc.eventbus.EventBusListener;
import org.jreserve.gui.misc.eventbus.EventBusManager;
import org.jreserve.gui.misc.utils.actions.ClipboardUtil.Copiable;
import org.jreserve.gui.misc.utils.widgets.CommonIcons;
import org.jreserve.gui.misc.utils.widgets.WidgetUtils;
import org.jreserve.gui.trianglewidget.TriangleEditController;
import org.jreserve.gui.trianglewidget.TriangleWidget;
import org.jreserve.gui.trianglewidget.TriangleWidgetPanel;
import org.jreserve.jrlib.triangle.Triangle;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
class LayerEditorPanel extends javax.swing.JPanel {

    private ClaimTriangleCalculationImpl calculation;
    private DefaultListModel modificationModel = new DefaultListModel();
    
    LayerEditorPanel(ClaimTriangleCalculationImpl calculation) {
        this.calculation = calculation;
        initComponents();
        initCalculation();
    }
    
    private void initCalculation() {
        if(calculation != null) {
            widgetPanel.setTriangleGeometry(calculation.getGeometry());
            widgetPanel.setLayers(calculation.createLayers());
            widgetPanel.getTriangleWidget().setEditController(new LayerEditController());
            resetModificationList();
            EventBusManager.getDefault().subscribe(this);
        }
    }
    
    private void resetModificationList() {
        modificationModel.removeAllElements();
        int count = calculation.getModificationCount();
        for(int i=0; i<count; i++)
            modificationModel.addElement(calculation.getModificationAt(i));
    }
    
    TriangleWidgetPanel getWidgetPanel() {
        return widgetPanel;
    }
    
    void componentClosed() {
        EventBusManager.getDefault().unsubscribe(this);
    }
    
    @EventBusListener(forceEDT = true)
    public void calculationChanged(CalculationEvent.Change evt) {
        if(calculation == evt.getCalculationProvider()) {
            widgetPanel.setTriangleGeometry(calculation.getGeometry());
            widgetPanel.setLayers(calculation.createLayers());
            resetModificationList();
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        triangleWidgetPanel1 = new org.jreserve.gui.trianglewidget.TriangleWidgetPanel();
        splitPane = new javax.swing.JSplitPane();
        widgetPanel = new org.jreserve.gui.trianglewidget.TriangleWidgetPanel();
        layerPanel = new javax.swing.JPanel();
        layerToolBar = new javax.swing.JToolBar();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        layerScroll = new javax.swing.JScrollPane();
        layerList = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        splitPane.setResizeWeight(1.0);
        splitPane.setOneTouchExpandable(true);
        splitPane.setLeftComponent(widgetPanel);

        layerPanel.setLayout(new java.awt.BorderLayout());

        layerToolBar.setFloatable(false);
        layerToolBar.setRollover(true);

        upButton.setIcon(CommonIcons.arrowUp());
        org.openide.awt.Mnemonics.setLocalizedText(upButton, null);
        upButton.setToolTipText(org.openide.util.NbBundle.getMessage(LayerEditorPanel.class, "LayerEditorPanel.upButton.toolTipText")); // NOI18N
        upButton.setFocusable(false);
        upButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        upButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        layerToolBar.add(upButton);

        downButton.setIcon(CommonIcons.arrowDown());
        org.openide.awt.Mnemonics.setLocalizedText(downButton, null);
        downButton.setToolTipText(org.openide.util.NbBundle.getMessage(LayerEditorPanel.class, "LayerEditorPanel.downButton.toolTipText")); // NOI18N
        downButton.setFocusable(false);
        downButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        layerToolBar.add(downButton);

        deleteButton.setIcon(CommonIcons.delete());
        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, null);
        deleteButton.setToolTipText(org.openide.util.NbBundle.getMessage(LayerEditorPanel.class, "LayerEditorPanel.deleteButton.toolTipText")); // NOI18N
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        layerToolBar.add(deleteButton);

        layerPanel.add(layerToolBar, java.awt.BorderLayout.PAGE_START);

        layerList.setModel(modificationModel);
        layerList.setCellRenderer(new ModificationRenderer());
        layerScroll.setViewportView(layerList);

        layerPanel.add(layerScroll, java.awt.BorderLayout.CENTER);

        splitPane.setRightComponent(layerPanel);

        add(splitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downButton;
    private javax.swing.JList layerList;
    private javax.swing.JPanel layerPanel;
    private javax.swing.JScrollPane layerScroll;
    private javax.swing.JToolBar layerToolBar;
    private javax.swing.JSplitPane splitPane;
    private org.jreserve.gui.trianglewidget.TriangleWidgetPanel triangleWidgetPanel1;
    private javax.swing.JButton upButton;
    private org.jreserve.gui.trianglewidget.TriangleWidgetPanel widgetPanel;
    // End of variables declaration//GEN-END:variables

    private class ModificationRenderer implements ListCellRenderer {
        
        private ListCellRenderer delegate = WidgetUtils.displayableListRenderer();

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if(value instanceof CalculationModifier)
                value = ((CalculationModifier)value).getDisplayable();
            return delegate.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    }
    
   private class LayerEditController implements TriangleEditController {

        @Override
        public boolean allowsEdit(TriangleWidget widget, int accident, int development) {
            if(widget.isCummulated() || development == 0)
                return true;
            
            Triangle t = widget.getModel().getTriangle();
            return !Double.isNaN(t.getValue(accident, development-1));
        }

        @Override
        public void processEdit(TriangleWidget widget, int accident, int development, double value) {
            value = getValue(widget, accident, development, value);
            
            ClaimTriangleCorrectionModifier m = new ClaimTriangleCorrectionModifier(accident, development, value);
            int index = widgetPanel.getSelectedLayerIndex();
            if(index < 0 || widgetPanel.getLayers().size() == (index+1))
                calculation.addModification(m);
            else
                calculation.addModification(index, m);
        }
        
        private double getValue(TriangleWidget widget, int accident, int development, double value) {
            if(widget.isCummulated() || development == 0)
                return value;
            
            Triangle t = widget.getModel().getTriangle();
            double original = t.getValue(accident, development);
            double prev = t.getValue(accident, development-1);
            double dif = original - prev;
            double correction = dif - value;
            
            return original - correction;
        }
    }

}
