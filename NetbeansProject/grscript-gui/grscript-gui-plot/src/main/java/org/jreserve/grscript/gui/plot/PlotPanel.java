/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.grscript.gui.plot;

import java.awt.CardLayout;
import java.awt.Dialog;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.HelpCtx;

/**
 *
 * @author Peter Decsi
 */
public class PlotPanel extends javax.swing.JPanel {
    
    private final static boolean MODAL = false;
    
    public static void showCharts(String title, Map<String, JFreeChart> charts) {
        final DialogDescriptor dd = new DialogDescriptor(
                new PlotPanel(charts), title, MODAL, 
                new Object[0], null, DialogDescriptor.DEFAULT_ALIGN, 
                HelpCtx.DEFAULT_HELP, null);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Dialog d = DialogDisplayer.getDefault().createDialog(dd);
                d.setVisible(true);
            }
        });
    } 
    
    
    private CardLayout chartLayout = new CardLayout();
    private DefaultListModel listModel = new DefaultListModel();
    
    /**
     * Creates new form PlotPanel
     */
    private PlotPanel(Map<String, JFreeChart> charts) {
        initComponents();
        addCharts(charts);
    }

    private void addCharts(Map<String, JFreeChart> charts) {
        for(Map.Entry<String, JFreeChart> entry : charts.entrySet())
            addChart(entry.getKey(), entry.getValue());
    }
    
    private void addChart(String name, JFreeChart chart) {
        ChartPanel panel = new ChartPanel(chart);
        chartPanel.add(new JScrollPane(panel), name);
        listModel.addElement(name);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPanel = new javax.swing.JSplitPane();
        nameScroll = new javax.swing.JScrollPane();
        nameList = new javax.swing.JList();
        chartPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        nameList.setModel(listModel);
        nameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        nameList.getSelectionModel().addListSelectionListener(new NameListener());
        nameScroll.setViewportView(nameList);

        splitPanel.setLeftComponent(nameScroll);

        chartPanel.setLayout(chartLayout);
        splitPanel.setRightComponent(chartPanel);

        add(splitPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel;
    private javax.swing.JList nameList;
    private javax.swing.JScrollPane nameScroll;
    private javax.swing.JSplitPane splitPanel;
    // End of variables declaration//GEN-END:variables

    private class NameListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            String name = (String) nameList.getSelectedValue();
            if(name != null)
                chartLayout.show(chartPanel, name);
        }

    }
}
