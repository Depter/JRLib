/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.calculations.vector.modifications;

import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.concurrent.Callable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jreserve.gui.localesettings.LocaleSettings;
import org.jreserve.gui.misc.utils.tasks.TaskUtil;
import org.jreserve.jrlib.triangle.Triangle;
import org.jreserve.jrlib.vector.Vector;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 * @version 1.0
 */
@Messages({
    "MSG.VectorCorrectionEditDialog.Value.Empty=Corrigated value is not set!",
    "MSG.VectorCorrectionEditDialog.Value.Invalid=Corrigated value is not a number!",
    "LBL.VectorCorrectionEditDialog.ProgressTitle=Adjusting correction...",
    "LBL.VectorCorrectionEditDialog.Title=Edit Correction"
})
class VectorCorrectionEditDialog extends javax.swing.JPanel {

    private final static boolean MODAL = true;
    
    static <T extends Triangle> void editCorrection(
            VectorCorrectionModifier modifier, 
            Vector source) {
        
        VectorCorrectionEditDialog panel = new VectorCorrectionEditDialog(modifier, source);
        
        DialogDescriptor dd = new DialogDescriptor(
            panel, Bundle.LBL_VectorCorrectionEditDialog_Title(), MODAL, 
            new Object[0], null, DialogDescriptor.DEFAULT_ALIGN, 
            HelpCtx.DEFAULT_HELP, null);
        
        Dialog dialog = DialogDisplayer.getDefault().createDialog(dd);
        panel.showDialog(dialog);
    }
    
    private Vector source;
    private VectorCorrectionModifier modification;
    
    private DecimalFormat df = LocaleSettings.createDecimalFormat();
    private ButtonListener buttonListener = new ButtonListener();
    
    private Dialog dialog;
    
    private VectorCorrectionEditDialog(VectorCorrectionModifier modifier, Vector source) {
        this.source = source;
        this.modification = modifier;
        initComponents();
        recalcOriginal();
        valueText.setText(LocaleSettings.getExactString(modifier.getValue()));
    }

    private void recalcOriginal() {
        int accident = modification.getAccident();
        double original = source.getValue(accident);
        originalText.setText(df.format(original));
    }
    
    private void showDialog(Dialog dialog) {
        this.dialog = dialog;
        dialog.pack();
        dialog.setVisible(true);
    }
    
    private void closeDialog() {
        dialog.setVisible(false);
        dialog.dispose();
        dialog = null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        originalLabel = new javax.swing.JLabel();
        originalText = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        valueText = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        msgLabel = new org.jreserve.gui.misc.utils.widgets.MsgLabel();
        buttonPanel = new javax.swing.JPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(originalLabel, org.openide.util.NbBundle.getMessage(VectorCorrectionEditDialog.class, "VectorCorrectionEditDialog.originalLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(originalLabel, gridBagConstraints);

        originalText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(originalText, null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(originalText, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(valueLabel, org.openide.util.NbBundle.getMessage(VectorCorrectionEditDialog.class, "VectorCorrectionEditDialog.valueLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(valueLabel, gridBagConstraints);

        valueText.setColumns(15);
        valueText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valueText.setText(null);
        valueText.getDocument().addDocumentListener(new InputListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(valueText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(filler1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(msgLabel, org.openide.util.NbBundle.getMessage(VectorCorrectionEditDialog.class, "VectorCorrectionEditDialog.msgLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(msgLabel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(filler2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(VectorCorrectionEditDialog.class, "VectorCorrectionEditDialog.okButton.text")); // NOI18N
        okButton.setEnabled(false);
        okButton.addActionListener(buttonListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        buttonPanel.add(okButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(VectorCorrectionEditDialog.class, "VectorCorrectionEditDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(buttonListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        buttonPanel.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(buttonPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private org.jreserve.gui.misc.utils.widgets.MsgLabel msgLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel originalLabel;
    private javax.swing.JLabel originalText;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextField valueText;
    // End of variables declaration//GEN-END:variables

    private class InputListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            valueChanged();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            valueChanged();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
        }
        
        private void valueChanged() {
            boolean valid = isInputValid();
            okButton.setEnabled(valid);
            if(valid)
                msgLabel.clearMessage();
        }
        
        private boolean isInputValid() {
            String str = valueText.getText();
            if(str == null || str.length() == 0) {
                msgLabel.showError(Bundle.MSG_VectorCorrectionEditDialog_Value_Empty());
                return false;
            }
            
            Double value = LocaleSettings.toDouble(str);
            if(value == null) {
                msgLabel.showError(Bundle.MSG_VectorCorrectionEditDialog_Value_Invalid());
                return false;
            }
            
            return true;
        }
    }
    
    private class ButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if(okButton == e.getSource()) {
                double value = LocaleSettings.toDouble(valueText.getText());
                Callable task = new SwapModificationTask(modification, value);
                TaskUtil.execute(task, null, Bundle.LBL_VectorCorrectionEditDialog_ProgressTitle());
            }
            closeDialog();
        }
    }
    
    private static class SwapModificationTask implements Callable<Void> {
        
        private final VectorCorrectionModifier modifier;
        private final double value;
        
        private SwapModificationTask(VectorCorrectionModifier modifier, double value) {
            this.modifier = modifier;
            this.value = value;
        }
                
        @Override
        public Void call() throws Exception {
            synchronized(modifier) {
                modifier.setValue(value);
            }
            return null;
        }
    
    }
}
