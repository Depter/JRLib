/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.misc.layerexplorer;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.filesystems.FileObject;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * @author Peter Decsi
 * @version 1.0
 */
@ConvertAsProperties(
    dtd = "-//org.jreserve.gui.misc.layerexplorer//LayerExplorer//EN",
    autostore = false
)
@TopComponent.Description(
    preferredID = "LayerExplorerTopComponent",
    iconBase = "org/jreserve/gui/misc/layerexplorer/drive.png",
    persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(
    mode = "rightSlidingSide", 
    openAtStartup = false
)
@ActionID(
    category = "Window", 
    id = "org.jreserve.gui.misc.layerexplorer.LayerExplorerTopComponent"
)
@ActionReferences({
    @ActionReference(path = "Menu/Window" /*, position = 333 */),
    @ActionReference(path = "Ribbon/TaskPanes/Windows/Utilities", position = 100)
})
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_LayerExplorerAction",
    preferredID = "LayerExplorerTopComponent"
)
@Messages({
    "CTL_LayerExplorerAction=Layer Explorer",
    "CTL_LayerExplorerTopComponent=Layer Explorer"
})
public final class LayerExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {
    
    private final static ExplorerManager em = new ExplorerManager();
    private FileAttributeModel propertyModel = new FileAttributeModel();
    private Lookup.Result<FileObject> fileResult;
    
    public LayerExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_LayerExplorerTopComponent());
        
        em.setRootContext(createRootNode());
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        fileResult = getLookup().lookupResult(FileObject.class);
        fileResult.addLookupListener(new FileListener());
    }
    
    private AbstractNode createRootNode() {
        AbstractNode root = new AbstractNode(Children.create(new LayerChildFactory(null), true));
        root.setDisplayName("Layer Registration");
        root.setIconBaseWithExtension("org/jreserve/gui/misc/layerexplorer/drive.png");
        return root;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        tree = new org.openide.explorer.view.BeanTreeView();
        tableScroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        splitPane.setDividerLocation(400);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setResizeWeight(1.0);
        splitPane.setLeftComponent(tree);

        table.setModel(propertyModel);
        tableScroll.setViewportView(table);

        splitPane.setRightComponent(tableScroll);

        add(splitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTable table;
    private javax.swing.JScrollPane tableScroll;
    private org.openide.explorer.view.BeanTreeView tree;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }
    
    private class FileListener implements LookupListener {

        @Override
        public void resultChanged(LookupEvent le) {
            FileObject file = getLookup().lookup(FileObject.class);
            if(file != null)
                propertyModel.setFileObject(file);
            
        }
    }
}
