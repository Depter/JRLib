/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.data.actions;

import java.util.ArrayList;
import java.util.List;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.jreserve.gui.data.api.DataCategory;
import org.jreserve.gui.misc.utils.notifications.DialogUtil;
import org.jreserve.gui.misc.utils.widgets.TextPrompt;
import org.openide.DialogDescriptor;
import org.openide.NotificationLineSupport;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peti
 */
@Messages({
    "LBL.CreateDataCategoryDialog.NameText.Prompt=Category Name",
    "LBL.CreateDataCategoryDialog.Title=New Data Category",
    "MSG.CreateDataCategoryDialog.Parent.Empty=Parent category not selected!",
    "MSG.CreateDataCategoryDialog.Name.Empty=Name is not set!",
    "# {0} - name",
    "MSG.CreateDataCategoryDialog.Name.Exists=Name \"{0}\" already exists!"
})
class CreateDataCategoryDialog extends javax.swing.JPanel implements DialogUtil.DialogContent {
    
    private final DataCategoryTreeModel treeModel;
    private TextPrompt namePrompt;
    private NotificationLineSupport nls;
    
    CreateDataCategoryDialog(DataCategory parent) {
        treeModel = new DataCategoryTreeModel(parent.getDataManager());
        setName(Bundle.LBL_CreateDataCategoryDialog_Title());
        initComponents();
        selectOriginalPath(parent);
    }
    
    private void selectOriginalPath(DataCategory category) {
        List<DataCategory> categories = new ArrayList<DataCategory>();
        while(category != null) {
            categories.add(0, category);
            category = category.getParent();
        }
        tree.setSelectionPath(new TreePath(categories.toArray()));
    }
    
    @Override
    public void setDialogDescriptor(DialogDescriptor dd) {
        this.nls = dd.createNotificationLineSupport();
        updatePath();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        treeLabel = new javax.swing.JLabel();
        treeScroll = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        pathLabel = new javax.swing.JLabel();
        pathText = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));
        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(CreateDataCategoryDialog.class, "CreateDataCategoryDialog.nameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(nameLabel, gridBagConstraints);

        nameText.setText(null);
        namePrompt = TextPrompt.createStandard(Bundle.LBL_CreateDataCategoryDialog_NameText_Prompt(), nameText);
        nameText.getDocument().addDocumentListener(new NameListener());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        add(nameText, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(treeLabel, org.openide.util.NbBundle.getMessage(CreateDataCategoryDialog.class, "CreateDataCategoryDialog.treeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        add(treeLabel, gridBagConstraints);

        treeScroll.setPreferredSize(new java.awt.Dimension(300, 200));

        tree.setModel(treeModel);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.getSelectionModel().addTreeSelectionListener(new ParentListener());
        tree.setCellRenderer(new DataCategoryTreeRenderer());
        treeScroll.setViewportView(tree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(treeScroll, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(CreateDataCategoryDialog.class, "CreateDataCategoryDialog.pathLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        add(pathLabel, gridBagConstraints);

        pathText.setEditable(false);
        pathText.setText(null);
        pathText.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 1.0;
        add(pathText, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathText;
    private javax.swing.JTree tree;
    private javax.swing.JLabel treeLabel;
    private javax.swing.JScrollPane treeScroll;
    // End of variables declaration//GEN-END:variables

    String getCategoryName() {
        return nameText.getText();
    }
    
    DataCategory getParentCategory() {
        TreePath path = tree.getSelectionPath();
        if(path == null)
            return null;
        return (DataCategory) path.getLastPathComponent();
    }
    
    private void updatePath() {
        validateInput();
        
        DataCategory parent = getParentCategory();
        String name = nameText.getText();
        
        if(parent == null || name == null || name.trim().length()==0)
            pathText.setText("");
        else
          pathText.setText(parent.getPath()+"/"+name);
    }
    
    private void validateInput() {
        if(isParentValid() && nameNotEmpty() && nameNotExis())
            showError(null);
    }
    
    private boolean isParentValid() {
        if(getParentCategory() == null) {
            showError(Bundle.MSG_CreateDataCategoryDialog_Parent_Empty());
            return false;
        }
        return true;
    }
    
    private void showError(String msg) {
        if(nls != null) {
            if(msg != null) {
                nls.setErrorMessage(msg);
            } else {
                nls.clearMessages();
            }
        }
    }
    
    private boolean nameNotEmpty() {
        String name = nameText.getText();
        if(name == null || name.trim().length() == 0) {
            showError(Bundle.MSG_CreateDataCategoryDialog_Name_Empty());
            return false;
        }
        return true;
    }
    
    private boolean nameNotExis() {
        String name = nameText.getText();
        DataCategory parent = getParentCategory();
        for(DataCategory child : parent.getChildCategories()) {
            if(name.equalsIgnoreCase(child.getName())) {
                showError(Bundle.MSG_CreateDataCategoryDialog_Name_Exists(name));
                return false;
            }
        }
        return true;
    }
    
    private class NameListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            updatePath();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updatePath();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
        }
    } 
    
    private class ParentListener implements TreeSelectionListener {
        @Override
        public void valueChanged(TreeSelectionEvent e) {
            updatePath();
        }
    }
}
