format 76
"util" // src::java::util
  revision 1
  modified_by 2 ""
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "D:/Eigen/Programs/JAVA/jdk1.6.0_17/src/java/util/"
  java_package "java.util"
  classview 128130 "util"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 128130 "EventListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A tagging interface that all event listener interfaces must extend.
@since JDK1.1"
    end

    class 129282 "Map"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that maps keys to values.  A map cannot contain duplicate keys;
each key can map to at most one value.

<p>This interface takes the place of the <tt>Dictionary</tt> class, which
was a totally abstract class rather than an interface.

<p>The <tt>Map</tt> interface provides three <i>collection views</i>, which
allow a map's contents to be viewed as a set of keys, collection of values,
or set of key-value mappings.  The <i>order</i> of a map is defined as
the order in which the iterators on the map's collection views return their
elements.  Some map implementations, like the <tt>TreeMap</tt> class, make
specific guarantees as to their order; others, like the <tt>HashMap</tt>
class, do not.

<p>Note: great care must be exercised if mutable objects are used as map
keys.  The behavior of a map is not specified if the value of an object is
changed in a manner that affects <tt>equals</tt> comparisons while the
object is a key in the map.  A special case of this prohibition is that it
is not permissible for a map to contain itself as a key.  While it is
permissible for a map to contain itself as a value, extreme caution is
advised: the <tt>equals</tt> and <tt>hashCode</tt> methods are no longer
well defined on such a map.

<p>All general-purpose map implementation classes should provide two
\"standard\" constructors: a void (no arguments) constructor which creates an
empty map, and a constructor with a single argument of type <tt>Map</tt>,
which creates a new map with the same key-value mappings as its argument.
In effect, the latter constructor allows the user to copy any map,
producing an equivalent map of the desired class.  There is no way to
enforce this recommendation (as interfaces cannot contain constructors) but
all of the general-purpose map implementations in the JDK comply.

<p>The \"destructive\" methods contained in this interface, that is, the
methods that modify the map on which they operate, are specified to throw
<tt>UnsupportedOperationException</tt> if this map does not support the
operation.  If this is the case, these methods may, but are not required
to, throw an <tt>UnsupportedOperationException</tt> if the invocation would
have no effect on the map.  For example, invoking the {@link #putAll(Map)}
method on an unmodifiable map may, but is not required to, throw the
exception if the map whose mappings are to be \"superimposed\" is empty.

<p>Some map implementations have restrictions on the keys and values they
may contain.  For example, some implementations prohibit null keys and
values, and some have restrictions on the types of their keys.  Attempting
to insert an ineligible key or value throws an unchecked exception,
typically <tt>NullPointerException</tt> or <tt>ClassCastException</tt>.
Attempting to query the presence of an ineligible key or value may throw an
exception, or it may simply return false; some implementations will exhibit
the former behavior and some will exhibit the latter.  More generally,
attempting an operation on an ineligible key or value whose completion
would not result in the insertion of an ineligible element into the map may
throw an exception or it may succeed, at the option of the implementation.
Such exceptions are marked as \"optional\" in the specification for this
interface.

<p>This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

<p>Many methods in Collections Framework interfaces are defined
in terms of the {@link Object#equals(Object) equals} method.  For
example, the specification for the {@link #containsKey(Object)
containsKey(Object key)} method says: \"returns <tt>true</tt> if and
only if this map contains a mapping for a key <tt>k</tt> such that
<tt>(key==null ? k==null : key.equals(k))</tt>.\" This specification should
<i>not</i> be construed to imply that invoking <tt>Map.containsKey</tt>
with a non-null argument <tt>key</tt> will cause <tt>key.equals(k)</tt> to
be invoked for any key <tt>k</tt>.  Implementations are free to
implement optimizations whereby the <tt>equals</tt> invocation is avoided,
for example, by first comparing the hash codes of the two keys.  (The
{@link Object#hashCode()} specification guarantees that two objects with
unequal hash codes cannot be equal.)  More generally, implementations of
the various Collections Framework interfaces are free to take advantage of
the specified behavior of underlying {@link Object} methods wherever the
implementor deems it appropriate.

@param <K> the type of keys maintained by this map
@param <V> the type of mapped values

@author  Josh Bloch
@version 1.56, 04/21/06
@see HashMap
@see TreeMap
@see Hashtable
@see SortedMap
@see Collection
@see Set
@since 1.2"
      operation 130690 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query Operations

Returns the number of key-value mappings in this map.  If the
map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

@return the number of key-value mappings in this map"
      end

      operation 130818 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains no key-value mappings.

@return <tt>true</tt> if this map contains no key-value mappings"
      end

      operation 130946 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 129410 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains a mapping for the specified
key.  More formally, returns <tt>true</tt> if and only if
this map contains a mapping for a key <tt>k</tt> such that
<tt>(key==null ? k==null : key.equals(k))</tt>.  (There can be
at most one such mapping.)

@param key key whose presence in this map is to be tested
@return <tt>true</tt> if this map contains a mapping for the specified
        key
@throws ClassCastException if the key is of an inappropriate type for
        this map (optional)
@throws NullPointerException if the specified key is null and this map
        does not permit null keys (optional)"
      end

      operation 131074 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 129410 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value.  More formally, returns <tt>true</tt> if and only if
this map contains at least one mapping to a value <tt>v</tt> such that
<tt>(value==null ? v==null : value.equals(v))</tt>.  This operation
will probably require time linear in the map size for most
implementations of the <tt>Map</tt> interface.

@param value value whose presence in this map is to be tested
@return <tt>true</tt> if this map maps one or more keys to the
        specified value
@throws ClassCastException if the value is of an inappropriate type for
        this map (optional)
@throws NullPointerException if the specified value is null and this
        map does not permit null values (optional)"
      end

      operation 131202 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 129410 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped,
or {@code null} if this map contains no mapping for the key.

<p>More formally, if this map contains a mapping from a key
{@code k} to a value {@code v} such that {@code (key==null ? k==null :
key.equals(k))}, then this method returns {@code v}; otherwise
it returns {@code null}.  (There can be at most one such mapping.)

<p>If this map permits null values, then a return value of
{@code null} does not <i>necessarily</i> indicate that the map
contains no mapping for the key; it's also possible that the map
explicitly maps the key to {@code null}.  The {@link #containsKey
containsKey} operation may be used to distinguish these two cases.

@param key the key whose associated value is to be returned
@return the value to which the specified key is mapped, or
        {@code null} if this map contains no mapping for the key
@throws ClassCastException if the key is of an inappropriate type for
        this map (optional)
@throws NullPointerException if the specified key is null and this map
        does not permit null keys (optional)"
      end

      operation 131330 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Modification Operations

Associates the specified value with the specified key in this map
(optional operation).  If the map previously contained a mapping for
the key, the old value is replaced by the specified value.  (A map
<tt>m</tt> is said to contain a mapping for a key <tt>k</tt> if and only
if {@link #containsKey(Object) m.containsKey(k)} would return
<tt>true</tt>.)

@param key key with which the specified value is to be associated
@param value value to be associated with the specified key
@return the previous value associated with <tt>key</tt>, or
        <tt>null</tt> if there was no mapping for <tt>key</tt>.
        (A <tt>null</tt> return can also indicate that the map
        previously associated <tt>null</tt> with <tt>key</tt>,
        if the implementation supports <tt>null</tt> values.)
@throws UnsupportedOperationException if the <tt>put</tt> operation
        is not supported by this map
@throws ClassCastException if the class of the specified key or value
        prevents it from being stored in this map
@throws NullPointerException if the specified key or value is null
        and this map does not permit null keys or values
@throws IllegalArgumentException if some property of the specified key
        or value prevents it from being stored in this map"
      end

      operation 131458 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 129410 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for a key from this map if it is present
(optional operation).   More formally, if this map contains a mapping
from key <tt>k</tt> to value <tt>v</tt> such that
<code>(key==null ?  k==null : key.equals(k))</code>, that mapping
is removed.  (The map can contain at most one such mapping.)

<p>Returns the value to which this map previously associated the key,
or <tt>null</tt> if the map contained no mapping for the key.

<p>If this map permits null values, then a return value of
<tt>null</tt> does not <i>necessarily</i> indicate that the map
contained no mapping for the key; it's also possible that the map
explicitly mapped the key to <tt>null</tt>.

<p>The map will not contain a mapping for the specified key once the
call returns.

@param key key whose mapping is to be removed from the map
@return the previous value associated with <tt>key</tt>, or
        <tt>null</tt> if there was no mapping for <tt>key</tt>.
@throws UnsupportedOperationException if the <tt>remove</tt> operation
        is not supported by this map
@throws ClassCastException if the key is of an inappropriate type for
        this map (optional)
@throws NullPointerException if the specified key is null and this
        map does not permit null keys (optional)"
      end

      operation 131586 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 129282 // Map
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Bulk Operations

Copies all of the mappings from the specified map to this map
(optional operation).  The effect of this call is equivalent to that
of calling {@link #put(Object,Object) put(k, v)} on this map once
for each mapping from key <tt>k</tt> to value <tt>v</tt> in the
specified map.  The behavior of this operation is undefined if the
specified map is modified while the operation is in progress.

@param m mappings to be stored in this map
@throws UnsupportedOperationException if the <tt>putAll</tt> operation
        is not supported by this map
@throws ClassCastException if the class of a key or value in the
        specified map prevents it from being stored in this map
@throws NullPointerException if the specified map is null, or if
        this map does not permit null keys or values, and the
        specified map contains null keys or values
@throws IllegalArgumentException if some property of a key or value in
        the specified map prevents it from being stored in this map"
      end

      operation 131714 "clear"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the mappings from this map (optional operation).
The map will be empty after this call returns.

@throws UnsupportedOperationException if the <tt>clear</tt> operation
        is not supported by this map"
      end

      operation 131842 "keySet"
	public return_type class_ref 129538 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Views

Returns a {@link Set} view of the keys contained in this map.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  If the map is modified
while an iteration over the set is in progress (except through
the iterator's own <tt>remove</tt> operation), the results of
the iteration are undefined.  The set supports element removal,
which removes the corresponding mapping from the map, via the
<tt>Iterator.remove</tt>, <tt>Set.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>
operations.  It does not support the <tt>add</tt> or <tt>addAll</tt>
operations.

@return a set view of the keys contained in this map"
      end

      operation 131970 "values"
	public return_type class_ref 129666 // Collection
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Collection} view of the values contained in this map.
The collection is backed by the map, so changes to the map are
reflected in the collection, and vice-versa.  If the map is
modified while an iteration over the collection is in progress
(except through the iterator's own <tt>remove</tt> operation),
the results of the iteration are undefined.  The collection
supports element removal, which removes the corresponding
mapping from the map, via the <tt>Iterator.remove</tt>,
<tt>Collection.remove</tt>, <tt>removeAll</tt>,
<tt>retainAll</tt> and <tt>clear</tt> operations.  It does not
support the <tt>add</tt> or <tt>addAll</tt> operations.

@return a collection view of the values contained in this map"
      end

      class 129794 "Entry"
	visibility public stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 132226 "getKey"
	  public explicit_return_type "K"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the key corresponding to this entry.

@return the key corresponding to this entry
@throws IllegalStateException implementations may, but are not
        required to, throw this exception if the entry has been
        removed from the backing map."
	end

	operation 132354 "getValue"
	  public explicit_return_type "V"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the value corresponding to this entry.  If the mapping
has been removed from the backing map (by the iterator's
<tt>remove</tt> operation), the results of this call are undefined.

@return the value corresponding to this entry
@throws IllegalStateException implementations may, but are not
        required to, throw this exception if the entry has been
        removed from the backing map."
	end

	operation 132482 "setValue"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Replaces the value corresponding to this entry with the specified
value (optional operation).  (Writes through to the map.)  The
behavior of this call is undefined if the mapping has already been
removed from the map (by the iterator's <tt>remove</tt> operation).

@param value new value to be stored in this entry
@return old value corresponding to the entry
@throws UnsupportedOperationException if the <tt>put</tt> operation
        is not supported by the backing map
@throws ClassCastException if the class of the specified value
        prevents it from being stored in the backing map
@throws NullPointerException if the backing map does not permit
        null values, and the specified value is null
@throws IllegalArgumentException if some property of this value
        prevents it from being stored in the backing map
@throws IllegalStateException implementations may, but are not
        required to, throw this exception if the entry has been
        removed from the backing map."
	end

	operation 132610 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129410 // Object
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Compares the specified object with this entry for equality.
Returns <tt>true</tt> if the given object is also a map entry and
the two entries represent the same mapping.  More formally, two
entries <tt>e1</tt> and <tt>e2</tt> represent the same mapping
if<pre>
    (e1.getKey()==null ?
     e2.getKey()==null : e1.getKey().equals(e2.getKey()))  &amp;&amp;
    (e1.getValue()==null ?
     e2.getValue()==null : e1.getValue().equals(e2.getValue()))
</pre>
This ensures that the <tt>equals</tt> method works properly across
different implementations of the <tt>Map.Entry</tt> interface.

@param o object to be compared for equality with this map entry
@return <tt>true</tt> if the specified object is equal to this map
        entry"
	end

	operation 132738 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the hash code value for this map entry.  The hash code
of a map entry <tt>e</tt> is defined to be: <pre>
    (e.getKey()==null   ? 0 : e.getKey().hashCode()) ^
    (e.getValue()==null ? 0 : e.getValue().hashCode())
</pre>
This ensures that <tt>e1.equals(e2)</tt> implies that
<tt>e1.hashCode()==e2.hashCode()</tt> for any two Entries
<tt>e1</tt> and <tt>e2</tt>, as required by the general
contract of <tt>Object.hashCode</tt>.

@return the hash code value for this map entry
@see Object#hashCode()
@see Object#equals(Object)
@see #equals(Object)"
	end
      end

      operation 132098 "entrySet"
	public return_type class_ref 129538 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K, V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the mappings contained in this map.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  If the map is modified
while an iteration over the set is in progress (except through
the iterator's own <tt>remove</tt> operation, or through the
<tt>setValue</tt> operation on a map entry returned by the
iterator) the results of the iteration are undefined.  The set
supports element removal, which removes the corresponding
mapping from the map, via the <tt>Iterator.remove</tt>,
<tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and
<tt>clear</tt> operations.  It does not support the
<tt>add</tt> or <tt>addAll</tt> operations.

@return a set view of the mappings contained in this map"
      end

      operation 132866 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129410 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comparison and hashing

Compares the specified object with this map for equality.  Returns
<tt>true</tt> if the given object is also a map and the two maps
represent the same mappings.  More formally, two maps <tt>m1</tt> and
<tt>m2</tt> represent the same mappings if
<tt>m1.entrySet().equals(m2.entrySet())</tt>.  This ensures that the
<tt>equals</tt> method works properly across different implementations
of the <tt>Map</tt> interface.

@param o object to be compared for equality with this map
@return <tt>true</tt> if the specified object is equal to this map"
      end

      operation 132994 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this map.  The hash code of a map is
defined to be the sum of the hash codes of each entry in the map's
<tt>entrySet()</tt> view.  This ensures that <tt>m1.equals(m2)</tt>
implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two maps
<tt>m1</tt> and <tt>m2</tt>, as required by the general contract of
{@link Object#hashCode}.

@return the hash code value for this map
@see Map.Entry#hashCode()
@see Object#equals(Object)
@see #equals(Object)"
      end
    end

    class 129538 "Set"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 129666 "Collection"
      visibility package stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end
  end
end
