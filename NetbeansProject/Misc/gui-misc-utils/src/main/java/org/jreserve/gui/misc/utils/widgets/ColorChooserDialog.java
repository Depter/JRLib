/*
 *  Copyright (C) 2013, Peter Decsi.
 * 
 *  This library is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public 
 *  License as published by the Free Software Foundation, either 
 *  version 3 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jreserve.gui.misc.utils.widgets;

import java.awt.Color;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Peter Decsi
 */
@Messages({
    "LBL.ColorChooserDialog.Title=Choose Color",
    "MSG.ColorChooserDialog.NoColor=Color is not selected!"
})
public class ColorChooserDialog extends javax.swing.JPanel {
    
    private final static int OPTION_ALIGN = DialogDescriptor.DEFAULT_ALIGN;
    private final static boolean MODAL = true;
    
    public static Color selectColor(Color initColor) {
        ColorChooserDialog form = new ColorChooserDialog(initColor);
        DialogDescriptor dd = new DialogDescriptor(
                form, Bundle.LBL_ColorChooserDialog_Title(), MODAL, 
                new Object[0], null, OPTION_ALIGN, 
                HelpCtx.DEFAULT_HELP, null);
        
        Dialog dialog = DialogDisplayer.getDefault().createDialog(dd);
        form.showDialog(dialog);
        return form.getSelectedColor();
    }
    
    private ButtonListener buttonListener = new ButtonListener();
    private Color selectedColor;
    private Dialog dialog;
    
    private ColorChooserDialog(Color initColor) {
        initComponents();
        colorChooser.setColor(initColor);
        colorChanged();
    }
    
    private Color getSelectedColor() {
        return selectedColor;
    }
    
    private void showDialog(Dialog dialog) {
        this.dialog = dialog;
        cancelButton.requestFocusInWindow();
        this.dialog.setVisible(true);
    }
    
    private void colorChanged() {
        selectedColor = colorChooser.getColor();
        okButton.setEnabled(selectedColor != null);
        if(selectedColor != null) {
            colorLabel.setBackground(selectedColor);
            colorLabel.setForeground(ColorUtil.getContrastColor(selectedColor));
            colorLabel.setText(" #"+ColorUtil.toHex(selectedColor));
            colorLabel.setOpaque(true);
        } else {
            colorLabel.setOpaque(false);
            colorLabel.setForeground(Color.RED);
            colorLabel.setText(Bundle.MSG_ColorChooserDialog_NoColor());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        colorChooser = new javax.swing.JColorChooser();
        buttonPanel = new javax.swing.JPanel();
        colorLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(12, 12, 12, 12));
        setLayout(new java.awt.BorderLayout(0, 20));

        colorChooser.setPreviewPanel(new JPanel());
        colorChooser.getSelectionModel().addChangeListener(new ColorListener());
        add(colorChooser, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(colorLabel, " ");
        colorLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        colorLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(colorLabel, gridBagConstraints);

        okButton.setIcon(CommonIcons.ok());
        org.openide.awt.Mnemonics.setLocalizedText(okButton, org.openide.util.NbBundle.getMessage(ColorChooserDialog.class, "ColorChooserDialog.okButton.text")); // NOI18N
        okButton.setEnabled(false);
        okButton.addActionListener(buttonListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        buttonPanel.add(okButton, gridBagConstraints);

        cancelButton.setIcon(CommonIcons.cancel());
        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(ColorChooserDialog.class, "ColorChooserDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(buttonListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        buttonPanel.add(cancelButton, gridBagConstraints);

        add(buttonPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    private class ColorListener implements ChangeListener {
        @Override
        public void stateChanged(ChangeEvent e) {
            colorChanged();
        }
    }
    
    private class ButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if(cancelButton == e.getSource())
                selectedColor = null;
            dialog.setVisible(false);
            dialog.dispose();
        }
    }
}
